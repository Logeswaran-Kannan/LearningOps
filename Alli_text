# Databricks Job: Sync Test Cases and Results with Azure DevOps

import requests
from requests.auth import HTTPBasicAuth
import pandas as pd
from pyspark.sql import SparkSession

# Azure DevOps Configuration
AZURE_ORG_URL = "https://dev.azure.com/{organization}"
PROJECT = "YourProject"
PAT = "your_personal_access_token"
auth = HTTPBasicAuth('', PAT)
headers = {"Content-Type": "application/json"}

# Create Sample Test Data
sample_data = [
    {"test_case_id": "TC001", "title": "Login Test", "status": "Pass", "error_message": "", "cycle_id": "CYCLE01", "test_run_id": "RUN123"},
    {"test_case_id": "TC002", "title": "Signup Test", "status": "Fail", "error_message": "NullPointerException at line 42", "cycle_id": "CYCLE01", "test_run_id": "RUN123"},
]

spark = SparkSession.builder.getOrCreate()
sample_df = spark.createDataFrame(sample_data)
sample_df.write.mode("overwrite").format("delta").saveAsTable("dlt.test_results")

# Read Delta Live Table
df = spark.read.format("delta").table("dlt.test_results")
test_cases = df.toPandas()

def create_test_case(title):
    url = f"{AZURE_ORG_URL}/{PROJECT}/_apis/test/testcases?api-version=7.1-preview.1"
    payload = {"name": title, "project": PROJECT}
    response = requests.post(url, auth=auth, headers=headers, json=payload)
    return response.json().get("id")

def create_test_run(cycle_id):
    url = f"{AZURE_ORG_URL}/{PROJECT}/_apis/test/runs?api-version=7.1-preview.2"
    payload = {"name": f"Run for {cycle_id}", "automated": True}
    response = requests.post(url, auth=auth, headers=headers, json=payload)
    return response.json().get("id")

def update_test_result(run_id, test_case_id, outcome):
    url = f"{AZURE_ORG_URL}/{PROJECT}/_apis/test/Runs/{run_id}/results?api-version=7.1-preview.6"
    payload = [{
        "testCase": {"id": test_case_id},
        "outcome": outcome,
        "automatedTestName": f"AutoTest-{test_case_id}"
    }]
    response = requests.post(url, auth=auth, headers=headers, json=payload)
    return response.status_code

def create_bug(title, error_message):
    url = f"{AZURE_ORG_URL}/{PROJECT}/_apis/wit/workitems/$Bug?api-version=7.1-preview.3"
    headers["Content-Type"] = "application/json-patch+json"
    payload = [
        {"op": "add", "path": "/fields/System.Title", "value": f"Bug: {title}"},
        {"op": "add", "path": "/fields/System.Description", "value": error_message},
    ]
    response = requests.post(url, auth=auth, headers=headers, json=payload)
    return response.json().get("id")

def link_bug_to_test_case(bug_id, test_case_id):
    url = f"{AZURE_ORG_URL}/{PROJECT}/_apis/wit/workitems/{bug_id}?api-version=7.1-preview.3"
    payload = [{
        "op": "add",
        "path": "/relations/-",
        "value": {
            "rel": "System.LinkTypes.Related",
            "url": f"{AZURE_ORG_URL}/{PROJECT}/_apis/test/testcases/{test_case_id}"
        }
    }]
    response = requests.patch(url, auth=auth, headers=headers, json=payload)
    return response.status_code

# Process Each Row
for _, row in test_cases.iterrows():
    test_case_id = create_test_case(row['title'])
    run_id = create_test_run(row['cycle_id'])
    update_test_result(run_id, test_case_id, row['status'])

    if row['status'] == "Fail":
        bug_id = create_bug(row['title'], row['error_message'])
        link_bug_to_test_case(bug_id, test_case_id)

print("Job completed.")
