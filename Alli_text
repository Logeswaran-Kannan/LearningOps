# Databricks Job: Create Test Plan, Test Cases, Test Run and Execute Pass/Fail Results in Azure DevOps

import requests
from requests.auth import HTTPBasicAuth
from pyspark.sql import SparkSession
import pandas as pd

# === CONFIG ===
organization = "your-org"
project = "your-project"
pat = "your-pat"  # Secure via secret scope in production
azdo_base = f"https://dev.azure.com/{organization}/{project}"
auth = HTTPBasicAuth('', pat)
headers = {"Content-Type": "application/json"}

# === Spark Session ===
spark = SparkSession.builder.getOrCreate()

# === Create Sample Test Data ===
sample_data = [
    {"title": "Login Functionality Test", "status": "Passed"},
    {"title": "Signup Validation Test", "status": "Failed"}
]
sample_df = spark.createDataFrame(sample_data)
sample_df.write.mode("overwrite").format("delta").saveAsTable("dlt.test_results")

# === Load test result data from Delta Live Table ===
df = spark.read.format("delta").table("dlt.test_results")
test_data = df.toPandas()

# === Helper Functions ===
def safe_json(resp):
    try:
        return resp.json()
    except Exception:
        print("Invalid JSON Response", resp.status_code, resp.text)
        return {}

def create_test_plan(plan_name):
    url = f"{azdo_base}/_apis/testplan/plans?api-version=7.1"
    payload = {"name": plan_name, "area": {"path": project}}
    resp = requests.post(url, auth=auth, headers=headers, json=payload)
    plan_id = safe_json(resp).get("id")
    print(f"✅ Created Test Plan ID: {plan_id}")
    return plan_id

def create_test_suite(plan_id, suite_name):
    url = f"{azdo_base}/_apis/testplan/Plans/{plan_id}/suites?api-version=7.1"
    payload = {"name": suite_name, "suiteType": "StaticTestSuite"}
    resp = requests.post(url, auth=auth, headers=headers, json=payload)
    suite_id = safe_json(resp).get("id")
    print(f"✅ Created Test Suite ID: {suite_id}")
    return suite_id

def create_test_case(title):
    url = f"{azdo_base}/_apis/wit/workitems/$Test%20Case?api-version=7.1"
    headers_patch = headers.copy()
    headers_patch["Content-Type"] = "application/json-patch+json"
    payload = [
        {"op": "add", "path": "/fields/System.Title", "value": title}
    ]
    resp = requests.post(url, auth=auth, headers=headers_patch, json=payload)
    case_id = safe_json(resp).get("id")
    print(f"📄 Created Test Case ID: {case_id} - {title}")
    return case_id

def add_test_case_to_suite(plan_id, suite_id, test_case_id):
    url = f"{azdo_base}/_apis/testplan/Plans/{plan_id}/suites/{suite_id}/testcases/{test_case_id}?api-version=7.1"
    resp = requests.post(url, auth=auth, headers=headers)
    return resp.status_code

def create_test_run(plan_id):
    url = f"{azdo_base}/_apis/test/runs?api-version=7.1"
    payload = {
        "name": "Automated Test Run",
        "plan": {"id": plan_id},
        "automated": True
    }
    resp = requests.post(url, auth=auth, headers=headers, json=payload)
    run_id = safe_json(resp).get("id")
    print(f"▶️ Created Test Run ID: {run_id}")
    return run_id

def add_test_points_to_run(run_id, test_case_ids):
    url = f"{azdo_base}/_apis/test/Runs/{run_id}/testpoint?api-version=7.1"
    payload = {"points": [{"id": case_id} for case_id in test_case_ids]}
    resp = requests.post(url, auth=auth, headers=headers, json=payload)
    return resp.status_code

def post_test_result(run_id, test_case_id, outcome):
    url = f"{azdo_base}/_apis/test/Runs/{run_id}/results?api-version=7.1"
    payload = [{
        "testCase": {"id": test_case_id},
        "outcome": outcome,
        "state": "Completed",
        "automatedTestName": f"AutoTest-{test_case_id}"
    }]
    resp = requests.post(url, auth=auth, headers=headers, json=payload)
    if resp.status_code in [200, 201]:
        print(f"✅ Posted result for test case {test_case_id} with outcome: {outcome}")
    else:
        print(f"❌ Failed to post result: {resp.status_code} - {resp.text}")

def complete_test_run(run_id):
    url = f"{azdo_base}/_apis/test/runs/{run_id}?api-version=7.1"
    payload = {"state": "Completed"}
    resp = requests.patch(url, auth=auth, headers=headers, json=payload)
    if resp.status_code in [200, 204]:
        print(f"✅ Test run {run_id} marked as Completed.")
    else:
        print(f"❌ Failed to complete test run: {resp.status_code} - {resp.text}")

# === Execute Full Test Cycle ===
plan_id = create_test_plan("Databricks Test Plan")
suite_id = create_test_suite(plan_id, "Databricks Suite")
test_case_ids = []

for _, row in test_data.iterrows():
    case_id = create_test_case(row['title'])
    add_test_case_to_suite(plan_id, suite_id, case_id)
    test_case_ids.append(case_id)

run_id = create_test_run(plan_id)

for i, row in test_data.iterrows():
    post_test_result(run_id, test_case_ids[i], row['status'])

complete_test_run(run_id)

print("✅ Full test cycle completed successfully.")
