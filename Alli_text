import pandas as pd
import matplotlib.pyplot as plt
import requests
import base64
from io import BytesIO

# Step 1: Read from DLT Table (Databricks SQL table)
df = spark.read.table("core_tst_sys9.default.ddl_compare_source")

# Step 2: Convert to Pandas for processing
df_pd = df.select("comparison_result").dropna().toPandas()

# Step 3: Calculate value counts and percentages
value_counts = df_pd["comparison_result"].value_counts()
percentages = (value_counts / value_counts.sum()) * 100

# Step 4: Create a summary table
table_df = pd.DataFrame({
    "Result": value_counts.index,
    "Count": value_counts.values,
    "Percentage": percentages.round(2).values
})

# Step 5: Plot doughnut chart with optimized size
fig, ax = plt.subplots(figsize=(5, 5), dpi=100)  # Smaller size and DPI for lower image size
wedges, texts, autotexts = ax.pie(
    value_counts,
    labels=value_counts.index,
    autopct='%1.1f%%',
    startangle=90,
    wedgeprops=dict(width=0.4)  # Doughnut effect
)
# Add a white circle in the middle
centre_circle = plt.Circle((0, 0), 0.70, fc='white')
fig.gca().add_artist(centre_circle)
ax.axis('equal')
plt.title("Comparison Result Distribution (Doughnut)")

# Save chart to buffer with optimization
buf = BytesIO()
plt.savefig(buf, format='png', bbox_inches='tight', optimize=True)
buf.seek(0)

# Encode image to base64 for Teams message
img_base64 = base64.b64encode(buf.read()).decode('utf-8')
buf.close()

# Step 6: Format markdown-style summary table
markdown_table = "| Result | Count | Percentage |\n|--------|-------|------------|\n"
for index, row in table_df.iterrows():
    markdown_table += f"| {row['Result']} | {row['Count']} | {row['Percentage']}% |\n"

# Step 7: Build Teams MessageCard payload
teams_webhook_url = "https://outlook.office.com/webhook/..."  # Replace with your Teams webhook

payload = {
    "@type": "MessageCard",
    "@context": "http://schema.org/extensions",
    "summary": "DLT Comparison Result Summary",
    "title": "üìä DLT Table - Comparison Result Summary",
    "sections": [
        {
            "activityTitle": "Doughnut Chart Overview",
            "images": [
                {
                    "image": f"data:image/png;base64,{img_base64}"
                }
            ]
        },
        {
            "text": f"Summary Table:\n\n{markdown_table}"
        }
    ]
}

# Step 8: Send to Teams
response = requests.post(teams_webhook_url, json=payload)

# Check HTTP response from Teams
print(f"Status Code: {response.status_code}")
print(f"Response Text: {response.text}")

if response.status_code == 200:
    if "message delivery failed" in response.text.lower():
        print("‚ùå Message delivery failed even though request succeeded.")
    else:
        print("‚úÖ Message sent to Teams!")
else:
    print("‚ùå Failed to send message.")
