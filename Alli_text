# Databricks Job: Create Test Cases and Update Results in Azure DevOps from Delta Table

import requests
from requests.auth import HTTPBasicAuth
from pyspark.sql import SparkSession
import pandas as pd

# === CONFIG ===
organization = "your-org"
project = "your-project"
pat = "your-pat"  # Ideally from Databricks secret scope
azdo_base = f"https://dev.azure.com/{organization}/{project}"
auth = HTTPBasicAuth('', pat)
headers = {"Content-Type": "application/json"}

# === Spark Session ===
spark = SparkSession.builder.getOrCreate()

# === Create Sample Test Data ===
sample_data = [
    {"title": "Login Functionality Test", "status": "Pass", "error_message": ""},
    {"title": "Signup Validation Test", "status": "Fail", "error_message": "AssertionError: Email field not validated"}
]
sample_df = spark.createDataFrame(sample_data)
sample_df.write.mode("overwrite").format("delta").saveAsTable("dlt.test_results")

# === Load test result data from Delta Live Table ===
df = spark.read.format("delta").table("dlt.test_results")
test_data = df.toPandas()

# === Helper Functions ===
def safe_json(resp):
    try:
        return resp.json()
    except Exception:
        print("Invalid JSON Response", resp.status_code, resp.text)
        return {}

def create_test_plan(plan_name):
    url = f"{azdo_base}/_apis/testplan/plans?api-version=7.1"
    payload = {"name": plan_name, "area": {"path": project}}
    resp = requests.post(url, auth=auth, headers=headers, json=payload)
    return safe_json(resp).get("id")

def create_test_suite(plan_id, suite_name):
    url = f"{azdo_base}/_apis/testplan/Plans/{plan_id}/suites?api-version=7.1"
    payload = {"name": suite_name, "suiteType": "StaticTestSuite"}
    resp = requests.post(url, auth=auth, headers=headers, json=payload)
    return safe_json(resp).get("id")

def create_test_case(title):
    url = f"{azdo_base}/_apis/wit/workitems/$Test%20Case?api-version=7.1"
    headers_patch = headers.copy()
    headers_patch["Content-Type"] = "application/json-patch+json"
    payload = [
        {"op": "add", "path": "/fields/System.Title", "value": title}
    ]
    resp = requests.post(url, auth=auth, headers=headers_patch, json=payload)
    return safe_json(resp).get("id")

def add_test_case_to_suite(plan_id, suite_id, test_case_id):
    url = f"{azdo_base}/_apis/testplan/Plans/{plan_id}/suites/{suite_id}/testcases/{test_case_id}?api-version=7.1"
    resp = requests.post(url, auth=auth, headers=headers)
    return resp.status_code

def create_test_run(plan_id, suite_id):
    url = f"{azdo_base}/_apis/test/runs?api-version=7.1"
    payload = {
        "name": f"Run for plan {plan_id}",
        "plan": {"id": plan_id},
        "automated": True
    }
    resp = requests.post(url, auth=auth, headers=headers, json=payload)
    return safe_json(resp).get("id")

def post_test_result(run_id, test_case_id, outcome):
    url = f"{azdo_base}/_apis/test/Runs/{run_id}/results?api-version=7.1"
    payload = [{
        "testCase": {"id": test_case_id},
        "outcome": outcome,
        "automatedTestName": f"AutoTest-{test_case_id}"
    }]
    resp = requests.post(url, auth=auth, headers=headers, json=payload)
    return resp.status_code

def create_bug(title, description):
    url = f"{azdo_base}/_apis/wit/workitems/$Bug?api-version=7.1"
    headers_patch = headers.copy()
    headers_patch["Content-Type"] = "application/json-patch+json"
    payload = [
        {"op": "add", "path": "/fields/System.Title", "value": f"Bug: {title}"},
        {"op": "add", "path": "/fields/System.Description", "value": description}
    ]
    resp = requests.post(url, auth=auth, headers=headers_patch, json=payload)
    return safe_json(resp).get("id")

def link_bug_to_test_case(bug_id, test_case_id):
    url = f"{azdo_base}/_apis/wit/workitems/{bug_id}?api-version=7.1"
    headers_patch = headers.copy()
    headers_patch["Content-Type"] = "application/json-patch+json"
    payload = [{
        "op": "add",
        "path": "/relations/-",
        "value": {
            "rel": "System.LinkTypes.Related",
            "url": f"https://dev.azure.com/{organization}/_apis/wit/workitems/{test_case_id}"
        }
    }]
    resp = requests.patch(url, auth=auth, headers=headers_patch, json=payload)
    return resp.status_code

# === Execute Flow ===
plan_id = create_test_plan("Automated Test Plan")
suite_id = create_test_suite(plan_id, "Automated Test Suite")
run_id = create_test_run(plan_id, suite_id)

for _, row in test_data.iterrows():
    test_case_id = create_test_case(row['title'])
    add_test_case_to_suite(plan_id, suite_id, test_case_id)
    post_test_result(run_id, test_case_id, row['status'])

    if row['status'] == "Fail":
        bug_id = create_bug(row['title'], row['error_message'])
        link_bug_to_test_case(bug_id, test_case_id)

print("âœ… Automation job completed successfully.")
