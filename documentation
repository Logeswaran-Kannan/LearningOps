import subprocess
import os
from datetime import datetime, timedelta
import tkinter as tk
from tkinter import messagebox

def connect_to_databricks():
    # Connect to Databricks cluster
    subprocess.call(['databricks', 'connect', '--profile', 'your_profile'])

def process_dbfs_files():
    dbfs_path = dbfs_path_entry.get()

    try:
        # Get list of files in the DBFS path
        files_list = subprocess.check_output(['databricks', 'fs', 'ls', dbfs_path], universal_newlines=True)

        # Process each file and collect stats
        result = []
        for line in files_list.split('\n'):
            if line:
                file_info = line.split()
                name = file_info[-1]
                size = int(file_info[-4])
                path = os.path.join(dbfs_path, name)
                creation_date = file_info[0] + ' ' + file_info[1]
                last_update_date = file_info[2] + ' ' + file_info[3]
                suggest_deletion = check_deletion_suggestion(last_update_date)
                result.append((name, size, path, creation_date, last_update_date, suggest_deletion))

        # Display the result in a messagebox
        messagebox.showinfo('Result', result)
    except subprocess.CalledProcessError:
        messagebox.showerror('Error', 'Invalid DBFS path')

def check_deletion_suggestion(last_update_date):
    # Check if last update date is 2 years ago from the current date
    last_update = datetime.strptime(last_update_date, '%Y-%m-%d %H:%M:%S')
    current_date = datetime.now()
    two_years_ago = current_date - timedelta(days=365 * 2)
    return last_update < two_years_ago

# Create the main window
window = tk.Tk()
window.title('Databricks File Stats')
window.geometry('300x150')

# Create and pack the DBFS Path label and entry widget
dbfs_path_label = tk.Label(window, text='DBFS Path:')
dbfs_path_label.pack()

dbfs_path_entry = tk.Entry(window, width=30)
dbfs_path_entry.pack()

# Create and pack the Submit button
submit_button = tk.Button(window, text='Submit', command=process_dbfs_files)
submit_button.pack()

# Connect to Databricks on startup
connect_to_databricks()

# Start the main event loop
window.mainloop()
