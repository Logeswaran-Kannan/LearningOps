import requests
import json
import time

# Databricks cluster configuration
cluster_url = "https://<databricks-instance>.cloud.databricks.com"
token = "<databricks-access-token>"
dbfs_path = "/mnt/dbfs-file-path"

# API endpoint for submitting a run
api_endpoint = f"{cluster_url}/api/2.0/jobs/runs/submit"

# Prepare the request headers with the authentication token
headers = {
    "Authorization": f"Bearer {token}",
    "Content-Type": "application/json"
}

# Prepare the request body to read data from DBFS file
data = {
    "run_name": "Databricks Run",
    "existing_cluster_id": "<cluster-id>",  # Enter your cluster ID here
    "notebook_task": {
        "notebook_path": "/databricks/python_code",
        "base_parameters": {
            "dbfs_path": dbfs_path
        }
    }
}

# Send the request to Databricks to execute the code
response = requests.post(api_endpoint, headers=headers, data=json.dumps(data))

# Check if the request was successful
if response.status_code == 200:
    run_id = response.json()["run_id"]
    print(f"Run submitted successfully. Run ID: {run_id}")
else:
    print("Error submitting run:", response.text)
    exit()

# Check the status of the run until it completes
run_status_endpoint = f"{cluster_url}/api/2.0/jobs/runs/get?run_id={run_id}"

while True:
    response = requests.get(run_status_endpoint, headers=headers)

    # Check if the request was successful
    if response.status_code == 200:
        run_status = response.json()["state"]["life_cycle_state"]
        print("Run status:", run_status)

        if run_status == "TERMINATED":
            break  # Run completed, exit the loop
    else:
        print("Error retrieving run status:", response.text)
        exit()

    time.sleep(10)  # Wait for 10 seconds before checking the status again

# Get the final run details
final_run_endpoint = f"{cluster_url}/api/2.0/jobs/runs/get-output?run_id={run_id}"
response = requests.get(final_run_endpoint, headers=headers)

# Check if the request was successful
if response.status_code == 200:
    output = response.json()["notebook_output"]["result"]
    print("Output:")
    print(output)
else:
    print("Error retrieving output:", response.text)
