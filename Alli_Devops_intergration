import requests
import json

# -------------------- Config --------------------
devops_organization = "https://dev.azure.com/BICoE"  # Replace with your org URL
project = "LVAnalytics"
test_plan_id = 12520
test_suite_id = 12521
pat_token = "your_pat_token"

headers = {
    "Authorization": f"Basic {base64.b64encode(f':{pat_token}'.encode()).decode()}",
    "Content-Type": "application/json"
}
# ------------------------------------------------


# ✅ Get Test Point for a Test Case
def get_test_point_list_for_case(test_case_id):
    try:
        url = f"{devops_organization}/{project}/_apis/testplan/plans/{test_plan_id}/suites/{test_suite_id}/testpoints?testCaseId={test_case_id}&api-version=7.1-preview.2"
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        points = response.json().get("value", [])
        for pt in points:
            print(f"🔗 Test Point for Case {test_case_id}: ID {pt.get('id')} (Config: {pt.get('configuration', {}).get('id')})")
        return points
    except Exception as e:
        print(f"❌ Error fetching test point for test case {test_case_id}: {e}")
        return []


# ✅ Update Test Result
def update_test_result(test_point_id, test_case_id, outcome):
    try:
        # 1. Create test run
        run_url = f"{devops_organization}/{project}/_apis/test/runs?api-version=7.1-preview.3"
        test_run_payload = {
            "name": "Automated Run",
            "plan": {"id": test_plan_id},
            "pointIds": [test_point_id]
        }
        run_response = requests.post(run_url, headers=headers, json=test_run_payload)
        run_response.raise_for_status()
        run_id = run_response.json().get("id")

        # 2. Post test result
        result_url = f"{devops_organization}/{project}/_apis/test/runs/{run_id}/results?api-version=7.1-preview.3"
        result_payload = [{
            "testCase": {"id": test_case_id},
            "outcome": outcome,
            "state": "Completed"
        }]
        result_response = requests.post(result_url, headers=headers, json=result_payload)
        result_response.raise_for_status()

        print(f"✅ Test Case {test_case_id} updated to {outcome}")
    except Exception as e:
        print(f"❌ Error updating result for test case {test_case_id}: {e}")


# ✅ Create Defect Linked to Test Case
def create_defect(title, associated_test_case_id):
    try:
        defect_url = f"{devops_organization}/{project}/_apis/wit/workitems/$Bug?api-version=7.1-preview.3"
        patch_data = [
            {"op": "add", "path": "/fields/System.Title", "value": title},
            {"op": "add", "path": "/relations/-", "value": {
                "rel": "System.LinkTypes.Hierarchy-Reverse",
                "url": f"{devops_organization}/{project}/_apis/test/testCases/{associated_test_case_id}",
                "attributes": {"comment": "Linked failed test case"}
            }}
        ]
        response = requests.patch(defect_url, headers={**headers, 'Content-Type': 'application/json-patch+json'}, json=patch_data)
        response.raise_for_status()
        print(f"🐞 Defect created for Test Case {associated_test_case_id}: {title}")
        return response.json()
    except Exception as e:
        print(f"❌ Error creating defect for Test Case {associated_test_case_id}: {e}")
        return {}


# ✅ Example Test Case Sync from Delta Table
test_data = df.select("test_case_id", "title", "steps", "status", "defect_required").collect()

for row in test_data:
    test_case_id = row['test_case_id']
    title = row['title']
    steps = row['steps']
    status = row['status']
    defect_required = row['defect_required']

    # 🔗 Get Test Point
    test_points = get_test_point_list_for_case(test_case_id)
    if not test_points:
        print(f"⚠️ Skipping Test Case {test_case_id} - No test point found.")
        continue

    # Use first test point
    test_point_id = test_points[0].get("id")

    # 🧪 Update Result
    if status.lower() in ["pass", "fail"]:
        outcome = "Passed" if status.lower() == "pass" else "Failed"
        update_test_result(test_point_id, test_case_id, outcome)

        # 🐞 Create Defect if required
        if status.lower() == "fail" and defect_required:
            create_defect(f"Defect: {title}", test_case_id)

print("✅ Test case sync completed.")
