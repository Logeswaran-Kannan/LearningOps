import pandas as pd
import requests

# Step 1: Read from DLT Table (Databricks SQL table)
df = spark.read.table("core_tst_sys9.default.ddl_compare_source_level")

# Step 2: Convert to Pandas for processing
df_pd = df.select("comparison_result", "table_name").dropna().toPandas()

# Step 3: Calculate value counts and percentages
value_counts = df_pd["comparison_result"].value_counts()
percentages = (value_counts / value_counts.sum()) * 100

# Step 4: Create HTML table and progress bar for DDL summary
distinct_tables = df_pd.groupby("comparison_result")["table_name"].nunique()

html_table_ddl = """
<table>
<tr><th>🧪 Comparison Result</th><th>📋 Distinct Tables</th><th>🔢 Count</th><th>📊 Percentage</th></tr>
"""

for result, count in value_counts.items():
    percent = percentages[result]
    tables = distinct_tables.get(result, 0)
    color = "#28a745" if result.lower() == "match" else "#dc3545"
    icon = "✅" if result.lower() == "match" else "❌"
    html_table_ddl += f"<tr><td><b style='color:{color}'>{icon} {result}</b></td><td>{tables}</td><td>{count}</td><td>{percent:.2f}%</td></tr>"
html_table_ddl += "</table>"

# Progress Bar for simplified Match/Mismatch
df_pd["status_group"] = df_pd["comparison_result"].apply(lambda x: "Match" if x.lower() == "match" else "Mismatch")
status_group_counts = df_pd["status_group"].value_counts()
total = status_group_counts.sum()
progress_bar_ddl = ""
for status_group, count in status_group_counts.items():
    percent = (count / total) * 100
    icon = "✅" if status_group == "Match" else "❌"
    color = "#28a745" if status_group == "Match" else "#dc3545"
    progress_bar_ddl += f"<div style='background:#e0e0e0;border-radius:5px;width:100%;margin-bottom:4px;'>"
    progress_bar_ddl += f"<div style='width:{percent:.2f}%;background:{color};color:white;padding:2px 5px;border-radius:5px;font-size:12px;'>"
    progress_bar_ddl += f"{icon} {status_group} - {percent:.2f}%" + "</div></div>"

# Step 5: Data validation result
query = """
SELECT
  validation_timestamp,
  table_name,
  src_count,
  tgt_count,
  status,
  comment,
  time_taken_seconds,
  test_case_detail,
  run_id
FROM core_tst_sys9.default.data_migration_validation_results
WHERE run_id = (SELECT MAX(run_id) FROM core_tst_sys9.default.data_migration_validation_results)
"""

latest_pd = spark.sql(query).toPandas()
latest_run_id = latest_pd["run_id"].iloc[0] if not latest_pd.empty else "N/A"
latest_validation_timestamp = latest_pd["validation_timestamp"].iloc[0] if not latest_pd.empty else "N/A"

# Step 6: Format data validation table
status_counts = latest_pd['status'].value_counts()
status_percentages = (status_counts / status_counts.sum()) * 100

html_table_validation = """
<table>
<tr><th>📌 Status</th><th>🔢 Count</th><th>📊 Percentage</th></tr>
"""
progress_bar_val = ""
for status, count in status_counts.items():
    percent = status_percentages[status]
    icon = "✅" if status.lower() == "pass" else "❌"
    color = "#28a745" if status.lower() == "pass" else "#dc3545"
    html_table_validation += f"<tr><td><b style='color:{color}'>{icon} {status}</b></td><td>{count}</td><td>{percent:.2f}%</td></tr>"
    progress_bar_val += f"<div style='background:#e0e0e0;border-radius:5px;width:100%;margin-bottom:4px;'>"
    progress_bar_val += f"<div style='width:{percent:.2f}%;background:{color};color:white;padding:2px 5px;border-radius:5px;font-size:12px;'>"
    progress_bar_val += f"{icon} {status} - {percent:.2f}%" + "</div></div>"
html_table_validation += "</table>"

# Step 7: Build Teams MessageCard payload
teams_webhook_url = "https://outlook.office.com/webhook/..."  # Replace with your Teams webhook

payload = {
    "@type": "MessageCard",
    "@context": "http://schema.org/extensions",
    "summary": "DLT and Validation Metrics",
    "title": "📊 DLT Table & Data Validation Summary",
    "sections": [
        {
            "text": f"### 🧮 <b>DDL Comparison Metrics</b><br>🕒 Validation Timestamp: <b>{latest_validation_timestamp}</b><br>🆔 Run ID: <b>{latest_run_id}</b><br><br>{html_table_ddl}<br><br><b>Progress Overview:</b><br>{progress_bar_ddl}"
        },
        {
            "text": f"### 📋 <b>Data Validation Status Summary</b><br>{html_table_validation}<br><br><b>Progress Overview:</b><br>{progress_bar_val}"
        }
    ]
}

# Step 8: Send to Teams
response = requests.post(teams_webhook_url, json=payload)

# Check HTTP response from Teams
print(f"Status Code: {response.status_code}")
print(f"Response Text: {response.text}")

if response.status_code == 200:
    if "message delivery failed" in response.text.lower():
        print("❌ Message delivery failed even though request succeeded.")
    else:
        print("✅ Message sent to Teams!")
else:
    print("❌ Failed to send message.")
