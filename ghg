import tkinter as tk
from tkinter import filedialog
from jira import JIRA
from openpyxl import load_workbook

def connect_to_jira(server, username, token):
    try:
        jira_options = {'server': server}
        jira = JIRA(options=jira_options, basic_auth=(username, token))
        return jira
    except Exception as e:
        print(f"Failed to connect to Jira: {e}")
        return None

def link_users(jira, excel_file_path):
    try:
        wb = load_workbook(excel_file_path)
        sheet = wb.active

        for row in sheet.iter_rows(min_row=2, values_only=True):
            user_id_1, user_id_2 = row[0], row[1]

            # Perform Jira user linking operation here with user_id_1 and user_id_2
            # For example: jira.link_users(user_id_1, user_id_2)

        print("User linking completed successfully.")
    except Exception as e:
        print(f"Error while linking users: {e}")

def browse_excel_file():
    file_path = filedialog.askopenfilename()
    excel_file_entry.delete(0, tk.END)
    excel_file_entry.insert(0, file_path)

def connect_and_link_users():
    server = server_entry.get()
    username = username_entry.get()
    token = token_entry.get()
    excel_file_path = excel_file_entry.get()

    jira = connect_to_jira(server, username, token)
    if jira is not None:
        link_users(jira, excel_file_path)

# Create GUI
root = tk.Tk()
root.title("Jira User Linking")
root.geometry("400x200")

tk.Label(root, text="Jira Server:").pack()
server_entry = tk.Entry(root)
server_entry.pack()

tk.Label(root, text="Username:").pack()
username_entry = tk.Entry(root)
username_entry.pack()

tk.Label(root, text="Jira Token:").pack()
token_entry = tk.Entry(root, show="*")
token_entry.pack()

tk.Label(root, text="Excel File Path:").pack()
excel_file_entry = tk.Entry(root)
excel_file_entry.pack()

browse_button = tk.Button(root, text="Browse", command=browse_excel_file)
browse_button.pack()

connect_button = tk.Button(root, text="Connect and Link Users", command=connect_and_link_users)
connect_button.pack()

root.mainloop()
