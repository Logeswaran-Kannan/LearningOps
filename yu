# Import required libraries
from pyspark.sql import SparkSession
from pyspark.sql.functions import col, lit

# Initialize Spark session
spark = SparkSession.builder.appName("TableComparison").getOrCreate()

# Define source and destination database names
source_db_name = "source_database"
destination_db_name = "destination_database"

# Function to get table counts from a database and filter out unwanted tables
def get_table_counts_and_filter(db_name):
    # Get table names from the database
    tables = spark.catalog.listTables(db_name)
    
    # Filter out tables starting with '__apply' or ending with '__ghg'
    filtered_tables = [table.name for table in tables if not (table.name.startswith('__apply') or table.name.endswith('__ghg'))]
    
    # Create a DataFrame with table name and count
    table_counts = []
    for table_name in filtered_tables:
        count = spark.sql(f"SELECT COUNT(*) AS count FROM {db_name}.{table_name}").collect()[0].count
        table_counts.append((table_name, count))
    
    return table_counts

# Get table counts for source and destination databases
source_table_counts = get_table_counts_and_filter(source_db_name)
destination_table_counts = get_table_counts_and_filter(destination_db_name)

# Create a DataFrame with the comparison results
results = []

# Compare table counts between source and destination
for source_table, source_count in source_table_counts:
    found_in_destination = False
    for dest_table, dest_count in destination_table_counts:
        if source_table == dest_table:
            found_in_destination = True
            if source_count == dest_count:
                status = "Match"
            else:
                status = "Mismatch"
            results.append((source_table, source_count, dest_count, status))
            break
    
    if not found_in_destination:
        results.append((source_table, source_count, "Table missing in destination", "Missing"))

# Add missing tables from destination database
for dest_table, dest_count in destination_table_counts:
    found_in_source = False
    for source_table, source_count, _, _ in results:
        if dest_table == source_table:
            found_in_source = True
            break
    if not found_in_source:
        results.append((dest_table, "Table missing in source", dest_count, "Missing"))

# Create a DataFrame from the results and save it as a temporary table
result_df = spark.createDataFrame(results, ["Table Name", "Source Count", "Destination Count", "Status"])
result_df.createOrReplaceTempView("comparison_results")

# Show the comparison results
result_df.show()

# Stop the Spark session
spark.stop()
