# Import necessary libraries
import pandas as pd
from pyspark.sql import SparkSession

# Define function to copy tables from source database to target database
def copy_tables(source_database, target_database, table_names):
    # Initialize Spark session
    spark = SparkSession.builder.appName("CopyTables").getOrCreate()

    # Initialize an empty list to store results
    results = []

    try:
        # Iterate through the table names
        for table_name in table_names:
            # Read data from the source table
            source_df = spark.sql(f"SELECT RTPLOG_ID FROM {source_database}.{table_name}")

            # Create a new table name with 'bck' suffix
            target_table_name = f"{table_name}_bck"

            # Write data to the target table in the target database
            source_df.write.mode("overwrite").saveAsTable(f"{target_database}.{target_table_name}")

            # Get the count of records in the backup table
            target_table_count = spark.sql(f"SELECT COUNT(*) FROM {target_database}.{target_table_name}").first()[0]

            # Append result to the list
            results.append([source_database, table_name, target_database, target_table_name, target_table_count, "Complete"])

    except Exception as e:
        # Append failure result to the list in case of an exception
        results.append([source_database, table_name, target_database, target_table_name, None, f"Failure: {str(e)}"])

    finally:
        # Stop the Spark session
        spark.stop()

    return results

# Example: Get table names from the source database
source_database_input = "source_database_name"
table_names_input = ["table1", "table2"]  # Add the names of the tables you want to copy

# Specify the target database
target_database_input = "target_database_name"

# Copy tables and get results
copy_results = copy_tables(source_database_input, target_database_input, table_names_input)

# Convert results to a Pandas DataFrame
result_df = pd.DataFrame(copy_results, columns=["Source Database", "Source Table", "Target Database", "Target Table", "Target Table Count", "Status"])

# Generate HTML report
html_report = result_df.to_html(index=False)

# Display or save the HTML report
print(html_report)
# Optionally, you can save the HTML report to a file
# result_df.to_html("copy_tables_report.html", index=False)
