from pyspark.sql import SparkSession

# Create a Spark session
spark = SparkSession.builder.appName("DataComparison").getOrCreate()

# Define your source and destination databases
source_database_name = "your_source_database"
destination_database_name = "your_destination_database"

# Function to get table names from a database excluding '__apply' and '__ghg' tables
def get_table_names(database_name):
    tables = spark.sql(f"SHOW TABLES IN {database_name}").toPandas()
    return tables[~tables.tableName.str.startswith("__apply") & ~tables.tableName.str.endswith("__ghg")]

# Function to compare data in two DataFrames for the same table
def compare_data(source_df, destination_df):
    source_columns = [col for col in source_df.columns if col not in ['source_system', 'valid_from_dt']]
    destination_columns = [col for col in destination_df.columns if col not in ['source_system', 'valid_from_dt']]
    
    source_sample = source_df.select(*source_columns).limit(50).toPandas()
    destination_sample = destination_df.select(*destination_columns).limit(50).toPandas()
    
    return source_sample.equals(destination_sample)

# Create a temporary DataFrame to store the comparison results
comparison_results = []

# Get table names from source and destination databases
source_tables = get_table_names(source_database_name)
destination_tables = get_table_names(destination_database_name)

# Compare data for each table in both databases
for table_row in source_tables.itertuples():
    table_name = table_row.tableName
    
    source_df = spark.table(f"{source_database_name}.{table_name}")
    
    destination_table_row = destination_tables[destination_tables['tableName'] == table_name]
    
    if not destination_table_row.empty:
        destination_df = spark.table(f"{destination_database_name}.{table_name}")
        if compare_data(source_df, destination_df):
            status = "Match"
        else:
            status = "Mismatch"
        comparison_results.append((table_name, status))
    else:
        comparison_results.append((table_name, "Missing in Destination"))

# Add missing tables from destination to comparison results
for table_row in destination_tables.itertuples():
    table_name = table_row.tableName
    if table_name not in source_tables['tableName'].values:
        comparison_results.append((table_name, "Missing in Source"))

# Create a DataFrame from the results
comparison_df = spark.createDataFrame(comparison_results, ["Table_Name", "Status"])

# Show the comparison results
comparison_df.show()

# Save the comparison results to a temporary table
comparison_df.createOrReplaceTempView("data_comparison")

# Stop the Spark session
spark.stop()
