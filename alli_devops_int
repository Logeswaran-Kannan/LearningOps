# Databricks notebook pseudo-code for integrating Delta Live Table with Azure DevOps Test Plans
# Assumes PySpark environment with access to Azure DevOps REST API

from pyspark.sql.functions import col
import requests
import json
import time
import base64

# 0. Create sample test case table if not exists
schema = "core_tst_sys9.default"
table = "devopsintergration"
full_table_name = f"{schema}.{table}"

if not spark._jsparkSession.catalog().tableExists(full_table_name):
    print(f"Creating table {full_table_name} with sample test cases...")
    sample_data = [
        ("TC001", "Login Test - Success", "1. Navigate to login\n2. Enter credentials\n3. Click Login", "pass", False),
        ("TC002", "Login Test - Invalid Password", "1. Navigate to login\n2. Enter invalid password\n3. Click Login", "fail", True),
        ("TC003", "Access Dashboard Without Login", "1. Go to dashboard URL directly", "blocked", False),
        ("TC004", "User Logout", "1. Login\n2. Click logout button", "no run", False)
    ]
    columns = ["test_case_id", "title", "steps", "status", "defect_required"]
    df_sample = spark.createDataFrame(sample_data, columns)
    df_sample.write.format("delta").saveAsTable(full_table_name)
    print("Sample test case table created.")
else:
    print(f"Table {full_table_name} already exists.")

# 1. Load Sample Test Cases from Delta Live Table
df = spark.read.format("delta").table(full_table_name)

# 2. Azure DevOps Configuration
devops_organization = "https://dev.azure.com/LVAnalytics"
project = "BICoE"
test_plan_id = 12330
test_suite_id = 12332

personal_access_token = "YOUR_PAT_TOKEN_HERE"
encoded_pat = base64.b64encode(f":{personal_access_token}".encode()).decode()

headers = {
    'Authorization': f'Basic {encoded_pat}'
}

# --- Azure DevOps Helper Functions ---

def create_test_case(title, steps):
    try:
        url = f"{devops_organization}/{project}/_apis/wit/workitems/$Test%20Case?api-version=7.1-preview.3"
        patch_data = [
            {"op": "add", "path": "/fields/System.Title", "value": title},
            {"op": "add", "path": "/fields/Microsoft.VSTS.TCM.Steps", "value": steps}
        ]
        response = requests.post(url, headers={**headers, 'Content-Type': 'application/json-patch+json'}, json=patch_data)
        response.raise_for_status()
        print(f"Created test case: {title}")
        return response.json()
    except Exception as e:
        print(f"Error creating test case '{title}': {e}")
        return {}

def add_test_case_to_suite(test_case_id):
    try:
        url = f"{devops_organization}/{project}/_apis/test/plans/{test_plan_id}/suites/{test_suite_id}/testcases/{test_case_id}?api-version=7.1-preview.3"
        response = requests.post(url, headers={**headers, 'Content-Type': 'application/json'})
        if response.status_code in [200, 204]:
            print(f"Linked test case {test_case_id} to suite {test_suite_id}.")
        else:
            print(f"Failed to link test case {test_case_id}. Status: {response.status_code}, Response: {response.text}")
    except Exception as e:
        print(f"Error linking test case to suite: {e}")

def assign_configuration_to_suite(configuration_id):
    try:
        url = f"{devops_organization}/{project}/_apis/test/plans/{test_plan_id}/suites/{test_suite_id}?api-version=7.1-preview.3"
        payload = {
            "inheritDefaultConfigurations": False,
            "configurationIds": [configuration_id]
        }
        response = requests.patch(url, headers={**headers, 'Content-Type': 'application/json'}, json=payload)
        response.raise_for_status()
        print(f"Assigned test configuration ID {configuration_id} to suite {test_suite_id}.")
    except Exception as e:
        print(f"Error assigning configuration: {e}")

def get_available_configurations():
    try:
        url = f"{devops_organization}/{project}/_apis/test/configurations?api-version=5.0-preview.2"
        response = requests.get(url, headers={**headers, 'Content-Type': 'application/json'})
        response.raise_for_status()
        configs = response.json().get("value", [])
        if configs:
            print("Available configurations:")
            for cfg in configs:
                print(f" - ID: {cfg.get('id')}, Name: {cfg.get('name')}")
            if any(cfg.get("id") == 9 for cfg in configs):
                print("Configuration ID 9 is present. Using it.")
                return 9
            return configs[0].get("id")
        else:
            print("No test configurations found.")
            return None
    except Exception as e:
        print(f"Error fetching test configurations: {e}")
        return None

def get_test_point_id(test_case_id):
    try:
        url = f"{devops_organization}/{project}/_apis/testplan/plans/{test_plan_id}/suites/{test_suite_id}/testpoint?includePointDetails=true&api-version=7.1"
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        points = response.json().get("value", [])
        for pt in points:
            if pt.get("testCaseReference", {}).get("id") == test_case_id:
                print(f"✅ Found Test Point ID {pt['id']} for Test Case {test_case_id}")
                return pt['id']
        print(f"⚠️ No test point found for Test Case {test_case_id}")
        return None
    except Exception as e:
        print(f"❌ Error fetching test point list for test case {test_case_id}: {e}")
        return None

def update_test_results_in_batch(run_id, results):
    try:
        patch_result_url = f"{devops_organization}/{project}/_apis/test/runs/{run_id}/results?api-version=7.1"
        patch_response = requests.patch(patch_result_url, headers={**headers, 'Content-Type': 'application/json'}, json=results)
        patch_response.raise_for_status()
        print(f"✅ Updated test results for run {run_id}.")
    except Exception as e:
        print(f"❌ Error updating batch test results: {e}")

def create_defect(title, associated_test_case):
    try:
        defect_url = f"{devops_organization}/{project}/_apis/wit/workitems/$Bug?api-version=7.1-preview.3"
        patch_data = [
            {"op": "add", "path": "/fields/System.Title", "value": title},
            {"op": "add", "path": "/relations/-", "value": {
                "rel": "System.LinkTypes.Hierarchy-Reverse",
                "url": f"{devops_organization}/{project}/_apis/test/testCases/{associated_test_case}",
                "attributes": {"comment": "Linked failed test case"}
            }}
        ]
        response = requests.patch(defect_url, headers={**headers, 'Content-Type': 'application/json-patch+json'}, json=patch_data)
        response.raise_for_status()
        print(f"Defect created for test case {associated_test_case}: {title}")
        return response.json()
    except Exception as e:
        print(f"Error creating defect for test case '{associated_test_case}': {e}")
        return {}

# Assign configuration before processing test cases
config_id = get_available_configurations()
if config_id:
    assign_configuration_to_suite(config_id)

# 3. Processing the Delta Table
test_data = df.select("test_case_id", "title", "steps", "status", "defect_required").collect()
point_ids = []
results_payload = []

# Create a single test run
test_point_ids = []
for row in test_data:
    test_case_id = row['test_case_id']
    title = row['title']
    steps = row['steps']
    status = row['status']
    defect_required = row['defect_required']

    azure_test_case = create_test_case(title, steps)
    azure_test_case_id = azure_test_case.get("id")

    if azure_test_case_id:
        add_test_case_to_suite(azure_test_case_id)
        test_point_id = get_test_point_id(azure_test_case_id)
        if test_point_id:
            test_point_ids.append(test_point_id)

# Create the run
run_url = f"{devops_organization}/{project}/_apis/test/runs?api-version=7.1"
test_run_payload = {
    "name": "Automated Run",
    "plan": {"id": test_plan_id},
    "pointIds": test_point_ids,
    "automated": True
}
run_response = requests.post(run_url, headers={**headers, 'Content-Type': 'application/json'}, json=test_run_payload)
run_response.raise_for_status()
run_id = run_response.json().get("id")

print(f"⏳ Waiting 10 seconds for test run {run_id} to be ready...")
time.sleep(10)

# Collect results
for row in test_data:
    test_case_id = row['test_case_id']
    title = row['title']
    status = row['status']
    defect_required = row['defect_required']

    azure_test_case_id = None
    for r in test_data:
        if r['test_case_id'] == test_case_id:
            azure_test_case_id = r['test_case_id']
            break

    if azure_test_case_id:
        test_point_id = get_test_point_id(azure_test_case_id)
        if test_point_id and status in ["pass", "fail"]:
            outcome = "Passed" if status == "pass" else "Failed"
            results_payload.append({
                "id": test_point_id,
                "outcome": outcome,
                "state": "Completed",
                "automatedTestType": "UnitTest",
                "automatedTestName": f"TestCase_{test_case_id}"
            })

            if status == "fail" and defect_required:
                defect_title = f"Defect: {title}"
                create_defect(defect_title, azure_test_case_id)

update_test_results_in_batch(run_id, results_payload)

print("Test case table checked/created and test case sync completed.")
