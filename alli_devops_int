from pyspark.sql.functions import col
import requests
import json
import time
import base64

# 0. Create sample test case table if not exists
schema = "core_tst_sys9.default"
table = "devopsintergration"
full_table_name = f"{schema}.{table}"

if not spark._jsparkSession.catalog().tableExists(full_table_name):
    print(f"Creating table {full_table_name} with sample test cases...")
    sample_data = [
        ("TC001", "Login Test - Success", "1. Navigate to login\n2. Enter credentials\n3. Click Login", "pass", False),
        ("TC002", "Login Test - Invalid Password", "1. Navigate to login\n2. Enter invalid password\n3. Click Login", "fail", True),
        ("TC003", "Access Dashboard Without Login", "1. Go to dashboard URL directly", "blocked", False),
        ("TC004", "User Logout", "1. Login\n2. Click logout button", "no run", False)
    ]
    columns = ["test_case_id", "title", "steps", "status", "defect_required"]
    df_sample = spark.createDataFrame(sample_data, columns)
    df_sample.write.format("delta").saveAsTable(full_table_name)
    print("Sample test case table created.")
else:
    print(f"Table {full_table_name} already exists.")

# 1. Load Sample Test Cases from Delta Live Table
df = spark.read.format("delta").table(full_table_name)

# 2. Azure DevOps Configuration
devops_organization = "https://dev.azure.com/LVAnalytics"
project = "BICoE"
test_plan_id = 12330
test_suite_id = 12332

personal_access_token = "YOUR_PAT_TOKEN_HERE"
encoded_pat = base64.b64encode(f":{personal_access_token}".encode()).decode()

headers = {
    'Authorization': f'Basic {encoded_pat}'
}

# --- Azure DevOps Helper Functions ---

def create_test_case(title, steps):
    try:
        url = f"{devops_organization}/{project}/_apis/wit/workitems/$Test%20Case?api-version=7.1-preview.3"
        patch_data = [
            {"op": "add", "path": "/fields/System.Title", "value": title},
            {"op": "add", "path": "/fields/Microsoft.VSTS.TCM.Steps", "value": steps}
        ]
        response = requests.post(url, headers={**headers, 'Content-Type': 'application/json-patch+json'}, json=patch_data)
        response.raise_for_status()
        print(f"Created test case: {title}")
        return response.json()
    except Exception as e:
        print(f"Error creating test case '{title}': {e}")
        return {}

def add_test_case_to_suite(test_case_id):
    try:
        url = f"{devops_organization}/{project}/_apis/test/plans/{test_plan_id}/suites/{test_suite_id}/testcases/{test_case_id}?api-version=7.1-preview.3"
        response = requests.post(url, headers={**headers, 'Content-Type': 'application/json'})
        if response.status_code in [200, 204]:
            print(f"Linked test case {test_case_id} to suite {test_suite_id}.")
        else:
            print(f"Failed to link test case {test_case_id}. Status: {response.status_code}, Response: {response.text}")
    except Exception as e:
        print(f"Error linking test case to suite: {e}")

def get_test_points():
    url = f"{devops_organization}/{project}/_apis/testplan/plans/{test_plan_id}/suites/{test_suite_id}/testpoint?includePointDetails=true&api-version=7.1"
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json().get("value", [])

def create_test_run(point_ids):
    try:
        url = f"{devops_organization}/{project}/_apis/test/runs?api-version=7.1"
        payload = {"name": "Consolidated Automated Run", "plan": {"id": test_plan_id}, "pointIds": point_ids, "automated": True}
        response = requests.post(url, headers={**headers, 'Content-Type': 'application/json'}, json=payload)
        response.raise_for_status()
        return response.json().get("id")
    except Exception as e:
        print(f"Error creating test run: {e}")
        return None

def update_test_results(run_id, test_results):
    try:
        url = f"{devops_organization}/{project}/_apis/test/runs/{run_id}/results?api-version=7.1"
        response = requests.patch(url, headers={**headers, 'Content-Type': 'application/json'}, json=test_results)
        response.raise_for_status()
        print(f"Results updated for run {run_id}.")
    except Exception as e:
        print(f"Error updating results for run {run_id}: {e}")

def complete_test_run(run_id):
    try:
        url = f"{devops_organization}/{project}/_apis/test/runs/{run_id}?api-version=7.1"
        payload = {"state": "Completed", "isAutomated": True, "completedDate": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())}
        response = requests.patch(url, headers={**headers, 'Content-Type': 'application/json'}, json=payload)
        response.raise_for_status()
        print(f"Run {run_id} marked Completed.")
    except Exception as e:
        print(f"Error completing run {run_id}: {e}")

def create_defect(title, associated_test_case):
    try:
        url = f"{devops_organization}/{project}/_apis/wit/workitems/$Bug?api-version=7.1-preview.3"
        patch_data = [
            {"op": "add", "path": "/fields/System.Title", "value": title},
            {"op": "add", "path": "/relations/-", "value": {"rel": "System.LinkTypes.Hierarchy-Reverse", "url": f"{devops_organization}/{project}/_apis/wit/workitems/{associated_test_case}", "attributes": {"comment": "Linked failed test case"}}}
        ]
        response = requests.patch(url, headers={**headers, 'Content-Type': 'application/json-patch+json'}, json=patch_data)
        response.raise_for_status()
        print(f"Defect created for test case {associated_test_case}.")
    except Exception as e:
        print(f"Error creating defect for test case {associated_test_case}: {e}")

# Main Sync Logic
test_data = df.select("test_case_id", "title", "steps", "status", "defect_required").collect()
point_id_map = {}
az_test_case_id_map = {}

for row in test_data:
    azure_case = create_test_case(row['title'], row['steps'])
    azure_case_id = azure_case.get("id")
    if azure_case_id:
        az_test_case_id_map[row['test_case_id']] = azure_case_id
        add_test_case_to_suite(azure_case_id)

points = get_test_points()
for row in test_data:
    for pt in points:
        if pt.get("testCaseReference", {}).get("id") == az_test_case_id_map[row['test_case_id']]:
            point_id_map[row['test_case_id']] = pt['id']

run_id = create_test_run(list(point_id_map.values()))
if run_id:
    time.sleep(10)
    get_result_url = f"{devops_organization}/{project}/_apis/test/runs/{run_id}/results?api-version=7.1"
    result_response = requests.get(get_result_url, headers=headers)
    result_list = result_response.json().get("value", [])

    patch_payload = []
    for result in result_list:
        name = result.get("automatedTestName")
        if not name:
            continue
        case_id = name.split("_")[-1]
        match = next((r for r in test_data if r['test_case_id'] == case_id), None)
        if match:
            status = match['status']
            outcome = "Passed" if status == "pass" else ("Failed" if status == "fail" else "NotExecuted")
            patch_payload.append({
                "id": result["id"],
                "outcome": outcome,
                "state": "Completed",
                "automatedTestName": f"TestCase_{match['test_case_id']}",
                "automatedTestStorage": "AutomatedTesting",
                "testCaseTitle": match['title'],
                "durationInMs": 1000,
                "isAutomated": True
            })
            if outcome == "Failed" and match['defect_required']:
                create_defect(f"Defect: {match['title']}", az_test_case_id_map.get(match['test_case_id']))

    if patch_payload:
        update_test_results(run_id, patch_payload)
        complete_test_run(run_id)

print("âœ… Test case table checked/created and test case sync completed.")
