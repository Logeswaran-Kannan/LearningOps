... [previous code remains unchanged] ...

# Create a single test run with all points
all_point_ids = [point_id for (_, point_id) in point_id_map.values()]
run_id = create_test_run(all_point_ids)

if run_id:
    time.sleep(10)

    # Fetch actual test results after run creation
    get_result_url = f"{devops_organization}/{project}/_apis/test/runs/{run_id}/results?api-version=7.1"
    result_response = requests.get(get_result_url, headers=headers)
    result_response.raise_for_status()
    result_list = result_response.json().get("value", [])

    # Prepare the patch payload
    test_results_payload = []
    for result in result_list:
        automated_test_name = result.get("automatedTestName")
        test_case_id_from_name = automated_test_name.split("_")[-1]
        matching_row = next((r for r in test_data if r['test_case_id'] == test_case_id_from_name), None)

        if matching_row:
            status = matching_row['status']
            outcome = "Passed" if status == "pass" else ("Failed" if status == "fail" else "NotExecuted")
            test_results_payload.append({
                "id": result["id"],
                "outcome": outcome,
                "state": "Completed"
            })

            if outcome == "Failed" and matching_row['defect_required']:
                defect_title = f"Defect: {matching_row['title']}"
                create_defect(defect_title, result.get("testCaseReferenceId"))

    if test_results_payload:
        update_test_results(run_id, test_results_payload)

print("Test case table checked/created and test case sync completed.")
