from pyspark.sql.functions import col
import requests
import json
import time
import base64

# 0. Create sample test case table if not exists
schema = "core_tst_sys9.default"
table = "devopsintergration"
full_table_name = f"{schema}.{table}"

if not spark._jsparkSession.catalog().tableExists(full_table_name):
    print(f"Creating table {full_table_name} with sample test cases...")
    sample_data = [
        ("TC001", "Login Test - Success", "1. Navigate to login\n2. Enter credentials\n3. Click Login", "pass", False),
        ("TC002", "Login Test - Invalid Password", "1. Navigate to login\n2. Enter invalid password\n3. Click Login", "fail", True),
        ("TC003", "Access Dashboard Without Login", "1. Go to dashboard URL directly", "blocked", False),
        ("TC004", "User Logout", "1. Login\n2. Click logout button", "no run", False)
    ]
    columns = ["test_case_id", "title", "steps", "status", "defect_required"]
    df_sample = spark.createDataFrame(sample_data, columns)
    df_sample.write.format("delta").saveAsTable(full_table_name)
    print("Sample test case table created.")
else:
    print(f"Table {full_table_name} already exists.")

# 1. Load Sample Test Cases from Delta Live Table
df = spark.read.format("delta").table(full_table_name)

# 2. Azure DevOps Configuration
devops_organization = "https://dev.azure.com/LVAnalytics"
project = "BICoE"
test_plan_id = 12330
test_suite_id = 12332

personal_access_token = "YOUR_PAT_TOKEN_HERE"
encoded_pat = base64.b64encode(f":{personal_access_token}".encode()).decode()

headers = {
    'Authorization': f'Basic {encoded_pat}'
}

# --- Azure DevOps Helper Functions ---

def debug_print(label, data):
    print(f"\n=== DEBUG: {label} ===")
    print(json.dumps(data, indent=2))

# (functions like create_test_case, add_test_case_to_suite, etc. remain unchanged)

# Main Sync Logic
test_data = df.select("test_case_id", "title", "steps", "status", "defect_required").collect()
point_id_map = {}
az_test_case_id_map = {}

for row in test_data:
    azure_case = create_test_case(row['title'], row['steps'])
    azure_case_id = azure_case.get("id")
    if azure_case_id:
        az_test_case_id_map[row['test_case_id']] = azure_case_id
        add_test_case_to_suite(azure_case_id)

points = get_test_points()
debug_print("Fetched Test Points", points)

for row in test_data:
    for pt in points:
        if pt.get("testCaseReference", {}).get("id") == az_test_case_id_map[row['test_case_id']]:
            point_id_map[row['test_case_id']] = pt['id']

debug_print("Mapped Point IDs", point_id_map)

run_id = create_test_run(list(point_id_map.values()))
if run_id:
    print(f"Created Test Run ID: {run_id}")
    time.sleep(10)

    get_result_url = f"{devops_organization}/{project}/_apis/test/runs/{run_id}/results?api-version=7.1"
    result_response = requests.get(get_result_url, headers=headers)
    result_list = result_response.json().get("value", [])
    debug_print("Fetched Test Run Results", result_list)

    patch_payload = []
    for result in result_list:
        name = result.get("automatedTestName")
        if not name:
            continue
        case_id = name.split("_")[-1]
        match = next((r for r in test_data if r['test_case_id'] == case_id), None)
        if match:
            status = match['status']
            outcome = "Passed" if status == "pass" else ("Failed" if status == "fail" else "NotExecuted")
            single_patch = {
                "id": result["id"],
                "outcome": outcome,
                "state": "Completed",
                "automatedTestName": f"TestCase_{match['test_case_id']}",
                "automatedTestStorage": "AutomatedTesting",
                "testCaseTitle": match['title'],
                "durationInMs": 1000,
                "isAutomated": True
            }
            patch_payload.append(single_patch)
            debug_print(f"Patch Payload for TestCase {case_id}", single_patch)

            if outcome == "Failed" and match['defect_required']:
                create_defect(f"Defect: {match['title']}", az_test_case_id_map.get(match['test_case_id']))

    if patch_payload:
        debug_print("Final Patch Payload", patch_payload)
        update_test_results(run_id, patch_payload)
        complete_test_run(run_id)

print("âœ… Test case table checked/created and test case sync completed.")
