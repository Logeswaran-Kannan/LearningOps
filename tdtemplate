import tkinter as tk
from tkinter import filedialog, messagebox
import csv
import os
import shutil
import requests

def select_template_file():
    file_path = filedialog.askopenfilename(title="Select Template File", filetypes=(("CSV files", "*.csv"),))
    template_entry.delete(0, tk.END)
    template_entry.insert(tk.END, file_path)

def select_table_list_file():
    file_path = filedialog.askopenfilename(title="Select Table List File", filetypes=(("CSV files", "*.csv"),))
    table_list_entry.delete(0, tk.END)
    table_list_entry.insert(tk.END, file_path)

def select_output_file():
    file_path = filedialog.asksaveasfilename(title="Save Consolidated CSV File", filetypes=(("CSV files", "*.csv"),))
    output_entry.delete(0, tk.END)
    output_entry.insert(tk.END, file_path)

def upload_to_azure_devops():
    output_file_path = output_entry.get()

    # Azure DevOps information
    organization = "your_organization"
    project = "your_project"
    repository = "your_repository"
    pat = "your_personal_access_token"

    # API endpoint
    api_endpoint = f"https://dev.azure.com/{organization}/{project}/_apis/git/repositories/{repository}/pushes?api-version=6.1"

    # Create a new branch for the push
    branch_name = "new_branch"
    branch_api_endpoint = f"https://dev.azure.com/{organization}/{project}/_apis/git/repositories/{repository}/refs?api-version=6.1"
    branch_headers = {
        "Authorization": "Bearer " + pat,
        "Content-Type": "application/json"
    }
    branch_data = {
        "name": branch_name,
        "oldObjectId": "0000000000000000000000000000000000000000",
        "newObjectId": "7dab89e1628754ac0a217c042be35c737f0e3c77"
    }
    branch_response = requests.post(branch_api_endpoint, headers=branch_headers, json=branch_data)
    if branch_response.status_code != 201:
        tk.messagebox.showerror("Upload Error", "Error creating branch for push")
        return

    # Read the contents of the output CSV file
    with open(output_file_path, 'r') as file:
        content = file.read()

    # Create a new file in the repository
    file_path = f"{branch_name}/{os.path.basename(output_file_path)}"
    file_api_endpoint = f"https://dev.azure.com/{organization}/{project}/_apis/git/repositories/{repository}/pushes?api-version=6.1"
    file_headers = {
        "Authorization": "Bearer " + pat,
        "Content-Type": "application/json"
    }
    file_data = {
        "refUpdates": [
            {
                "name": f"refs/heads/{branch_name}",
                "oldObjectId": "0000000000000000000000000000000000000000"
            }
        ],
        "commits": [
            {
                "comment": "Uploading output CSV file",
                "changes": [
                    {
                        "changeType": "add",
                        "item": {
                            "path": file_path
                        },
                        "newContent": {
                            "content": content,
                            "contentType": "rawtext"
                        }
                    }
                ]
            }
        ]
    }
    file_response = requests.post(file_api_endpoint, headers=file_headers, json=file_data)
    if file_response.status_code != 201:
        tk.messagebox.showerror("Upload Error", "Error uploading file to Azure DevOps")
        return

    tk.messagebox.showinfo("Upload Complete", "The CSV file has been successfully uploaded to Azure DevOps!")

# Create the GUI window
window = tk.Tk()
window.title("CSV Document Generator")

# Template file selection
template_label = tk.Label(window, text="Template File:")
template_label.pack()
template_entry = tk.Entry(window, width=50)
template_entry.pack()
template_button = tk.Button(window, text="Browse", command=select_template_file)
template_button.pack()

# Table list file selection
table_list_label = tk.Label(window, text="Table List File:")
table_list_label.pack()
table_list_entry = tk.Entry(window, width=50)
table_list_entry.pack()
table_list_button = tk.Button(window, text="Browse", command=select_table_list_file)
table_list_button.pack()

# Output file selection
output_label = tk.Label(window, text="Output File:")
output_label.pack()
output_entry = tk.Entry(window, width=50)
output_entry.pack()
output_button = tk.Button(window, text="Save As", command=select_output_file)
output_button.pack()

# Upload to Azure DevOps button
upload_button = tk.Button(window, text="Upload to Azure DevOps", command=upload_to_azure_devops)
upload_button.pack()

# Start the GUI event loop
window.mainloop()
