from pyspark.sql import SparkSession
from pyspark.sql.functions import count, expr, current_date
from pyspark.sql.utils import AnalysisException

# Get the schema and table names from the CSV file in repository location
csv_path = "/path/to/csv/file.csv"
schema_table_df = spark.read.option("header", "true").csv(csv_path)
schemas = schema_table_df.select("schema").distinct().rdd.flatMap(lambda x: x).collect()
tables = schema_table_df.select("table").distinct().rdd.flatMap(lambda x: x).collect()

# Create a Spark session
spark = SparkSession.builder.getOrCreate()

# Iterate over each schema and table and perform data profiling
for schema_name in schemas:
    for table_name in tables:
        try:
            # Read the data from the specified schema and table
            df = spark.table(f"{schema_name}.{table_name}")

            # Perform data profiling
            profile_df = df.selectExpr(
                "*",  # Select all columns
                "1 as row_count"  # Add a column with constant value 1 for counting rows
            ).groupBy().agg(
                count("*").alias("row_count"),  # Total row count
                *[count(c).alias(c) for c in df.columns]  # Count distinct values for each column
            )

            # Calculate the value contribution percentage
            total_rows = profile_df.select("row_count").first()["row_count"]
            profile_df = profile_df.withColumn("value_contribution", expr(f"row_count/{total_rows} * 100"))

            # Add columns for schema, table name, and current date
            profile_df = profile_df.withColumn("schema", expr(f"'{schema_name}'"))
            profile_df = profile_df.withColumn("tablename", expr(f"'{table_name}'"))
            profile_df = profile_df.withColumn("profiling_date", current_date())

            # Save the data profiling results to the "dataprofile" table in overwrite mode
            profile_df.write.mode("overwrite").insertInto("dataprofile")
        except AnalysisException as e:
            print(f"Table {schema_name}.{table_name} not found: {str(e)}")
