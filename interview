import requests
import json

# Your Azure DevOps organization and project information
org_name = "your_organization_name"
project_name = "your_project_name"
personal_access_token = "your_personal_access_token"

# Initialize Spark session
spark = SparkSession.builder.appName("ExploratoryDataAnalysis").getOrCreate()

# Load input CSV containing DLT view names
input_csv_path = "dbfs:/path/to/input.csv"  # Update with the actual DBFS path
input_df = spark.read.option("header", "true").csv(input_csv_path)
dlt_view_names = input_df.select("DLTViewName").rdd.flatMap(lambda x: x).collect()

# Output DBFS path for saving HTML files
output_dbfs_path = "dbfs:/path/to/output_folder/"  # Update with the actual DBFS path

# Function to generate EDA HTML report for a DLT view
def generate_eda_report(dlt_view_name, test_run_id):
    # Load data from DLT view
    data = spark.sql(f"SELECT * FROM {dlt_view_name}")

    # EDA code (similar to the previous example)
    # ...

    # Convert summary, missing_values, and correlation_matrix to HTML
    # ...

    # Combine HTML components
    eda_report_html = f"""
    <html>
    <head>
    <style>
    {correlation_matrix_html}
    </style>
    </head>
    <body>
    <h2>Exploratory Data Analysis Report for {dlt_view_name}</h2>
    <h3>Summary Statistics</h3>
    {summary_html}
    <h3>Missing Values</h3>
    {missing_values_html}
    <h3>Correlation Matrix</h3>
    {correlation_matrix_html}
    </body>
    </html>
    """

    # Save HTML report to output DBFS path
    output_file_path = f"{output_dbfs_path}/{dlt_view_name}_eda_report.html"
    with open(output_file_path, "w") as html_file:
        html_file.write(eda_report_html)

    # Upload the HTML report to Azure DevOps test run
    upload_attachment_to_ado(test_run_id, output_file_path)

# Function to upload attachment to Azure DevOps
def upload_attachment_to_ado(test_run_id, attachment_path):
    upload_url = f"https://dev.azure.com/{org_name}/{project_name}/_apis/test/runs/{test_run_id}/attachments?api-version=7.0-preview.1"
    headers = {
        "Authorization": f"Basic {personal_access_token}",
        "Content-Type": "application/octet-stream",
    }

    with open(attachment_path, "rb") as attachment_file:
        attachment_content = attachment_file.read()

    response = requests.post(upload_url, headers=headers, data=attachment_content)

    if response.status_code == 200:
        print(f"Attachment uploaded successfully for test run {test_run_id}")
    else:
        print(f"Failed to upload attachment for test run {test_run_id}")

# Get the latest test run ID (incremental)
response = requests.get(
    f"https://dev.azure.com/{org_name}/{project_name}/_apis/test/runs?api-version=7.0-preview.3",
    headers={"Authorization": f"Basic {personal_access_token}"},
)
if response.status_code == 200:
    test_runs = response.json().get("value", [])
    latest_test_run = max(test_runs, key=lambda x: x.get("id", 0))
    latest_test_run_id = latest_test_run.get("id", 1) + 1  # Increment the ID
else:
    latest_test_run_id = 1  # Start from 1 if no test runs are found

# Generate EDA reports, save HTML files, and upload to Azure DevOps for each DLT view
for dlt_view_name in dlt_view_names:
    generate_eda_report(dlt_view_name, latest_test_run_id)

# Display completion message
print("EDA reports generated, HTML files saved, and attachments uploaded to Azure DevOps.")
