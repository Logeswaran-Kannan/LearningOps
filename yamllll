# Import necessary libraries
from pyspark.sql import SparkSession
from pyspark.sql.functions import col
import random

# Define your source and destination database names
source_db = "your_source_db"
destination_db = "your_destination_db"

# Define the timestamp range
start_timestamp = "2023-08-30T08:43:28.123+0000"
end_timestamp = "2023-09-04T08:43:28.123+0000"

# Get a list of table names in the source database (excluding '__apply' and '__ghg' tables)
source_tables = spark.sql(f"SHOW TABLES IN {source_db}").filter(~col("tableName").like("__apply%")).filter(~col("tableName").like("%__ghg")).select("tableName").rdd.map(lambda x: x[0]).collect()

# Initialize a dictionary to store the comparison results
comparison_results = {}

# Loop through each table in the source database
for table_name in source_tables:
    # Check if the table exists in the destination database
    try:
        spark.sql(f"SELECT 1 FROM {destination_db}.{table_name} LIMIT 1")
    except Exception as e:
        # Table does not exist in the destination database
        comparison_results[table_name] = "Table missing in destination"
        continue
    
    # Generate a random sample of 50 records from the source database based on 'sequence_by' column and timestamp range
    sample_query = f"""
        SELECT *
        FROM {source_db}.{table_name}
        WHERE sequence_by BETWEEN '{start_timestamp}' AND '{end_timestamp}'
        ORDER BY sequence_by
        LIMIT 50
    """
    
    source_sample = spark.sql(sample_query)
    
    # Exclude columns 'source_system' and 'valid_from_dt'
    source_sample = source_sample.drop("source_system", "valid_from_dt")
    
    # Perform data comparison between source and destination samples
    source_count = source_sample.count()
    
    destination_sample = spark.sql(f"SELECT * FROM {destination_db}.{table_name} WHERE sequence_by BETWEEN '{start_timestamp}' AND '{end_timestamp}' ORDER BY sequence_by LIMIT {source_count}")
    destination_sample = destination_sample.drop("source_system", "valid_from_dt")
    
    if source_sample.subtract(destination_sample).isEmpty() and destination_sample.subtract(source_sample).isEmpty():
        comparison_results[table_name] = "Data matches"
    else:
        comparison_results[table_name] = "Data does not match"

# Generate a chart to show the progression of completion
import matplotlib.pyplot as plt

labels = comparison_results.keys()
values = [1 if result == "Data matches" else 0 for result in comparison_results.values()]

plt.bar(labels, values)
plt.xlabel("Tables")
plt.ylabel("Completion")
plt.title("Comparison Progress")
plt.show()
