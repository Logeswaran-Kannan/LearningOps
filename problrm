from pyspark.sql.functions import *
from pyspark.sql.types import *

# Define the name of the database
database_name = "your_database_name"

# Get a list of all tables in the database
tables = spark.sql(f"SHOW TABLES IN {database_name}").select("tableName").collect()

# Loop through each table and perform data profiling on each column
for table in tables:
  table_name = table[0]
  df = spark.table(f"{database_name}.{table_name}")
  
  # Create a new dataframe to hold the profiling results
  profiling_results = spark.createDataFrame([], StructType([
    StructField("table_name", StringType(), True),
    StructField("column_name", StringType(), True),
    StructField("data_type", StringType(), True),
    StructField("distinct_count", IntegerType(), True),
    StructField("null_count", IntegerType(), True),
    StructField("avg_value_length", DoubleType(), True),
    StructField("min_value", StringType(), True),
    StructField("max_value", StringType(), True),
    StructField("most_common_values", StringType(), True)
  ]))
  
  # Loop through each column in the dataframe and perform data profiling
  for column in df.columns:
    data_type = str(df.schema[column].dataType)
    distinct_count = df.select(column).distinct().count()
    null_count = df.filter(col(column).isNull()).count()
    avg_value_length = df.select(avg(length(column))).collect()[0][0]
    min_value = df.select(min(column)).collect()[0][0]
    max_value = df.select(max(column)).collect()[0][0]
    
    # Determine the most common values in the column
    value_counts = df.groupBy(column).count().orderBy(desc("count")).limit(10)
    most_common_values = ""
    for row in value_counts.collect():
      most_common_values += f"{row[column]}: {row['count']}\n"
    
    # Add the profiling results for this column to the dataframe
    profiling_results = profiling_results.union(
      spark.createDataFrame([(table_name, column, data_type, distinct_count, null_count, avg_value_length, min_value, max_value, most_common_values)],
                            profiling_results.schema)
    )
  
  # Display the profiling results for this table
  display(profiling_results)
