import os
from datetime import datetime, timedelta
from pyspark.sql import SparkSession

# Set the DBFS path you want to collect stats for
dbfs_path = '/dbfs/your_directory'

# Define the threshold for deletable files (30 days)
threshold_days = 30

# Get the current date
current_date = datetime.now().date()

# Create a SparkSession
spark = SparkSession.builder.getOrCreate()

# Read the existing table
existing_table = spark.table('your_table')

# Collect file stats
file_stats = []
for root, dirs, files in os.walk(dbfs_path):
    for file in files:
        file_path = os.path.join(root, file)
        file_size = os.path.getsize(file_path)
        file_creation_date = datetime.fromtimestamp(os.path.getctime(file_path)).date()
        file_last_update_date = datetime.fromtimestamp(os.path.getmtime(file_path)).date()

        del_status = 'deletable' if (current_date - file_last_update_date).days > threshold_days else ''
        del_date = current_date if del_status == 'deletable' else None

        # Check if the file_path already exists in the existing table
        if file_path not in existing_table.select('path').rdd.flatMap(lambda x: x).collect():
            file_stats.append((file, file_size, file_path, file_creation_date, file_last_update_date, del_status, del_date))

# Create a DataFrame from the file stats
file_stats_df = spark.createDataFrame(file_stats, ['name', 'size', 'path', 'creation_date', 'last_update_date', 'del_status', 'del_date'])

# Append the DataFrame to the existing table
file_stats_df.write.mode('append').insertInto('your_table')

# Delete files marked as deletable
for row in file_stats_df.filter(file_stats_df.del_status == 'deletable').collect():
    file_path = row['path'].replace('/dbfs', '')  # Remove '/dbfs' from the path
    os.remove(file_path)

# Update the original table with the del_status column updated as 'deleted'
existing_table = spark.table('your_table')
existing_table.createOrReplaceTempView('temp_table')
deleted_files = spark.sql("SELECT name, size, path, creation_date, last_update_date, 'deleted' AS del_status, del_date FROM temp_table WHERE del_status = 'deletable'")
existing_table.union(deleted_files).write.mode('overwrite').insertInto('your_table')

