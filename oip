from pyspark.sql import SparkSession
from pyspark.sql.functions import *
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from IPython.display import HTML

# Initialize Spark session
spark = SparkSession.builder.appName("ExploratoryDataAnalysis").getOrCreate()

# Load input CSV containing DLT view names
input_csv_path = "dbfs:/path/to/input.csv"  # Update with the actual DBFS path
input_df = spark.read.option("header", "true").csv(input_csv_path)
dlt_view_names = input_df.select("DLTViewName").rdd.flatMap(lambda x: x).collect()

# Output DBFS path for saving HTML files
output_dbfs_path = "dbfs:/path/to/output_folder/"  # Update with the actual DBFS path

# Function to generate EDA HTML report for a DLT view
def generate_eda_report(dlt_view_name):
    # Load data from DLT view
    data = spark.sql(f"SELECT * FROM {dlt_view_name}")

    # EDA code
    summary = data.describe().toPandas()
    missing_values = data.select([count(when(col(c).isNull(), c)).alias(c) for c in data.columns]).toPandas()
    correlation_matrix = data.drop(*["non_numeric_columns"]).toPandas().corr()

    # Visualizations using Seaborn and Matplotlib
    sns.set(style="whitegrid")

    # Distribution plots
    for column in data.columns:
        plt.figure(figsize=(8, 6))
        sns.histplot(data.toPandas(), x=column, kde=True)
        plt.title(f'Distribution of {column}')
        plt.savefig(f"/dbfs/tmp/{dlt_view_name}_{column}_distribution.png")
        plt.close()

    # Scatter plots
    numeric_columns = [col for col, dtype in data.dtypes if dtype == "double"]
    for col1 in numeric_columns:
        for col2 in numeric_columns:
            if col1 != col2:
                plt.figure(figsize=(8, 6))
                sns.scatterplot(data.toPandas(), x=col1, y=col2)
                plt.title(f'Scatter Plot: {col1} vs {col2}')
                plt.savefig(f"/dbfs/tmp/{dlt_view_name}_{col1}_vs_{col2}_scatter.png")
                plt.close()

    # Box plots
    plt.figure(figsize=(12, 8))
    data_pd = data.toPandas()
    sns.boxplot(data=data_pd)
    plt.xticks(rotation=45)
    plt.title('Box Plot')
    plt.savefig(f"/dbfs/tmp/{dlt_view_name}_box_plot.png")
    plt.close()

    # Bar charts
    categorical_columns = [col for col, dtype in data.dtypes if dtype == "string"]
    for cat_col in categorical_columns:
        plt.figure(figsize=(10, 6))
        data_cat_counts = data.groupBy(cat_col).count().toPandas()
        sns.barplot(data=data_cat_counts, x=cat_col, y="count")
        plt.title(f'Bar Chart: {cat_col}')
        plt.xticks(rotation=45)
        plt.savefig(f"/dbfs/tmp/{dlt_view_name}_{cat_col}_bar_chart.png")
        plt.close()

    # Convert summary, missing_values, and correlation_matrix to HTML
    summary_html = summary.to_html()
    missing_values_html = missing_values.to_html()
    correlation_matrix_html = correlation_matrix.style.background_gradient(cmap='coolwarm').render()

    # Combine HTML components
    eda_report_html = f"""
    <html>
    <head>
    <style>
    {correlation_matrix_html}
    </style>
    </head>
    <body>
    <h2>Exploratory Data Analysis Report for {dlt_view_name}</h2>
    <h3>Summary Statistics</h3>
    {summary_html}
    <h3>Missing Values</h3>
    {missing_values_html}
    <h3>Correlation Matrix</h3>
    {correlation_matrix_html}
    <h3>Distribution Plots</h3>
    <img src="/dbfs/tmp/{dlt_view_name}_col_name_distribution.png" alt="Distribution Plot">
    <!-- Add other images as needed -->
    </body>
    </html>
    """

    # Save HTML report to output DBFS path
    output_file_path = f"{output_dbfs_path}/{dlt_view_name}_eda_report.html"
    with open(output_file_path, "w") as html_file:
        html_file.write(eda_report_html)

# Generate EDA reports and save HTML files for each DLT view
for dlt_view_name in dlt_view_names:
    generate_eda_report(dlt_view_name)

# Cleanup: Delete existing output files
dbutils.fs.rm(output_dbfs_path, True)

# Display completion message
print("EDA reports generated and HTML files saved.")
