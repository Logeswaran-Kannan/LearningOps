from pyspark.sql.functions import col, explode, from_json
from pyspark.sql.types import *

# Define the schema for the nested JSON structure
schema = StructType([
    StructField("coreRisk", ArrayType(
        StructType([
            StructField("drivers", ArrayType(
                StructType([
                    StructField("driver_Prn", StringType()),
                    StructField("incidents", StructType([
                        StructField("claims", ArrayType(
                            StructType([
                                StructField("claim_ClaimType", StringType()),
                                StructField("claim_Date", StringType()),
                                StructField("claim_DriverAtFaultInd", StringType()),
                                StructField("claim_NcdLostInd", StringType()),
                                StructField("claim_Prn", IntegerType())
                            ])
                        ))
                    ]))
                ])
            ))
        ])
    ))
])

# Read the table
df = spark.table("mqs.dlt_quote_request")

# Ensure Payload is cast to string before parsing
df = df.withColumn("Payload_str", col("Payload").cast("string"))

# Parse JSON column
parsed_df = df.withColumn("parsed", from_json(col("Payload_str"), schema))

# Explode coreRisk -> drivers -> claims
core_risk_df = parsed_df.select(explode("parsed.coreRisk").alias("coreRisk"))
drivers_df = core_risk_df.select(explode("coreRisk.drivers").alias("driver"))
claims_df = drivers_df.select(
    col("driver.driver_Prn"),
    explode("driver.incidents.claims").alias("claim")
)

# Select required fields
final_df = claims_df.select(
    col("driver_Prn"),
    col("claim.claim_ClaimType").alias("claim_ClaimType"),
    col("claim.claim_Date").alias("claim_Date"),
    col("claim.claim_DriverAtFaultInd").alias("claim_DriverAtFaultInd"),
    col("claim.claim_NcdLostInd").alias("claim_NcdLostInd"),
    col("claim.claim_Prn").cast("string").alias("claim_Prn")
)

# Show the result
final_df.show(truncate=False)
