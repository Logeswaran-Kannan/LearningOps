# Databricks notebook or job script for Teams Notification
# Make sure to install the required library: requests

import requests
import json
from datetime import datetime
from pyspark.sql.functions import col, count, max as spark_max

# TEAMS WEBHOOK URL
webhook_url = "<Your-Teams-Webhook-URL>"

# 1. Data Load Status
latest_run_id_df = spark.sql("""
    SELECT MAX(run_id) AS latest_run_id 
    FROM core_tst_sys9.default.audit_table_count_check
""")
latest_run_id = latest_run_id_df.collect()[0]["latest_run_id"]

data_status_df = spark.sql(f"""
    SELECT domain,
           COUNT(*) AS total_tables,
           SUM(CASE WHEN ods_stg_copy_count > 0 THEN 1 ELSE 0 END) AS stg_loaded,
           SUM(CASE WHEN ods_count > 0 THEN 1 ELSE 0 END) AS ods_loaded,
           SUM(CASE WHEN ods_views_count > 0 THEN 1 ELSE 0 END) AS view_loaded
    FROM core_tst_sys9.default.audit_table_count_check
    WHERE run_id = '{latest_run_id}'
    GROUP BY domain
""")

# 2. Schema Deviation Result
latest_ts_df = spark.sql("""
    SELECT MAX(load_timestamp) AS latest_ts 
    FROM core_tst_sys9.default.ddl_comparison_results
""")
latest_ts = latest_ts_df.collect()[0]["latest_ts"]

schema_deviation_df = spark.sql(f"""
    SELECT status, COUNT(DISTINCT targettablename) AS count
    FROM core_tst_sys9.default.ddl_comparison_results
    WHERE load_timestamp = '{latest_ts}'
    GROUP BY status
""")

# 3. ODS Data Validation
ods_validation_run_df = spark.sql("""
    SELECT MAX(run_id) AS latest_run_id 
    FROM core_tst_sys9.default.result_table
""")
ods_run_id = ods_validation_run_df.collect()[0]["latest_run_id"]

ods_validation_df = spark.sql(f"""
    SELECT processed_comment, COUNT(*) AS count
    FROM (
        SELECT *, 
               CASE WHEN comment LIKE 'Error: [TABLE_OR_VIEW_NOT_FOUND]%' THEN 'TABLE_OR_VIEW_NOT_FOUND'
                    ELSE comment END AS processed_comment
        FROM core_tst_sys9.default.result_table
        WHERE run_id = '{ods_run_id}'
    )
    GROUP BY processed_comment
""")

# 4. ODS_VIEW Data Validation
ods_view_validation_run_df = spark.sql("""
    SELECT MAX(run_id) AS latest_run_id 
    FROM core_tst_sys9.default.result_view_table
""")
ods_view_run_id = ods_view_validation_run_df.collect()[0]["latest_run_id"]

ods_view_validation_df = spark.sql(f"""
    SELECT processed_comment, COUNT(*) AS count
    FROM (
        SELECT *, 
               CASE WHEN comment LIKE 'Error: [TABLE_OR_VIEW_NOT_FOUND]%' THEN 'TABLE_OR_VIEW_NOT_FOUND'
                    ELSE comment END AS processed_comment
        FROM core_tst_sys9.default.result_view_table
        WHERE run_id = '{ods_view_run_id}'
    )
    GROUP BY processed_comment
""")

# Construct HTML
def df_to_html_table(title, df, headers):
    rows = "".join([f"<tr>{''.join([f'<td>{row[h]}</td>' for h in headers])}</tr>" for row in df.collect()])
    table = f"""
    <h3 style='color:#0076D7'>ðŸ“Š {title}</h3>
    <table border='1' style='border-collapse:collapse;width:100%;text-align:left;'>
        <tr>{''.join([f'<th>{h}</th>' for h in headers])}</tr>
        {rows}
    </table>
    """
    return table

html_sections = ""
html_sections += df_to_html_table("Data Load Status", data_status_df, ["domain", "total_tables", "stg_loaded", "ods_loaded", "view_loaded"])
html_sections += df_to_html_table("Schema Deviation", schema_deviation_df, ["status", "count"])
html_sections += df_to_html_table("ODS Data Validation", ods_validation_df, ["processed_comment", "count"])
html_sections += df_to_html_table("ODS_VIEW Data Validation", ods_view_validation_df, ["processed_comment", "count"])

# Create message card with HTML content
card = {
    "@type": "MessageCard",
    "@context": "http://schema.org/extensions",
    "summary": "ETL Health Report",
    "themeColor": "0076D7",
    "title": "ðŸ“¥ ETL Health Status - {}".format(datetime.now().strftime("%Y-%m-%d %H:%M:%S")),
    "text": html_sections
}

# Post to Teams
response = requests.post(webhook_url, headers={"Content-Type": "application/json"}, data=json.dumps(card))

if response.status_code != 200:
    raise ValueError(f"Request to Teams returned error {response.status_code}, the response is:\n{response.text}")
else:
    print("Notification sent successfully!")
