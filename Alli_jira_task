import requests
import json
from pyspark.sql.functions import col, max as spark_max, countDistinct

# Webhook URL for Teams
webhook_url = "<YOUR_TEAMS_WEBHOOK_URL>"

# 1. Data Load Status
latest_run_id = df_audit_table_count_check.select(spark_max("run_id")).first()[0]
data_load_df = (
    df_audit_table_count_check.filter(col("run_id") == latest_run_id)
    .withColumn("valid_load", ((col("ods_stg_copy_count") > 0) & (col("ods_count") > 0) & (col("ods_views_count") > 0)).cast("int"))
    .groupBy("domain")
    .agg({"table_name": "count"})
    .withColumnRenamed("count(table_name)", "table_count")
)

# 2. Schema Deviation Result
latest_schema_ts = df_ddl_comparison_results.select(spark_max("load_timestamp")).first()[0]
schema_dev_df = (
    df_ddl_comparison_results.filter(col("load_timestamp") == latest_schema_ts)
    .groupBy("status")
    .agg(countDistinct("targettablename").alias("table_count"))
)

# 3. ODS Data Validation
latest_result_run_id = df_result_table.select(spark_max("run_id")).first()[0]
ods_validation_df = (
    df_result_table.filter(col("run_id") == latest_result_run_id)
    .groupBy("processed_comment")
    .agg(countDistinct("run_id").alias("table_count"))
)

# 4. ODS View Data Validation
latest_view_run_id = df_result_view_table.select(spark_max("run_id")).first()[0]
ods_view_validation_df = (
    df_result_view_table.filter(col("run_id") == latest_view_run_id)
    .groupBy("processed_comment")
    .agg(countDistinct("run_id").alias("table_count"))
)

# Generate message sections
section1 = "\n".join([f"<li>üìÅ <b>{row['domain']}</b>: {row['table_count']} tables loaded</li>" for row in data_load_df.collect()])
section2 = "\n".join([f"<li>üîç <b>{row['status']}</b>: {row['table_count']} tables</li>" for row in schema_dev_df.collect()])
section3 = "\n".join([f"<li>‚úÖ <b>{row['processed_comment']}</b>: {row['table_count']} tables</li>" for row in ods_validation_df.collect()])
section4 = "\n".join([f"<li>üñºÔ∏è <b>{row['processed_comment']}</b>: {row['table_count']} tables</li>" for row in ods_view_validation_df.collect()])

# Final HTML message
html_message = f"""
<h2>üìä Data Pipeline Status</h2>
<h3>1Ô∏è‚É£ Data Load Status (Run ID: {latest_run_id})</h3>
<ul>{section1}</ul>
<h3>2Ô∏è‚É£ Schema Deviation Result (Load Timestamp: {latest_schema_ts})</h3>
<ul>{section2}</ul>
<h3>3Ô∏è‚É£ ODS Data Validation</h3>
<ul>{section3}</ul>
<h3>4Ô∏è‚É£ ODS View Data Validation</h3>
<ul>{section4}</ul>
"""

# Send message to Teams
payload = {
    "type": "message",
    "attachments": [
        {
            "contentType": "application/vnd.microsoft.card.adaptive",
            "content": {
                "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                "type": "AdaptiveCard",
                "version": "1.2",
                "body": [
                    {
                        "type": "TextBlock",
                        "text": "üì¢ Data Pipeline Status Update",
                        "weight": "Bolder",
                        "size": "Medium"
                    },
                    {
                        "type": "TextBlock",
                        "text": html_message,
                        "wrap": True
                    }
                ]
            }
        }
    ]
}

response = requests.post(webhook_url, data=json.dumps(payload), headers={"Content-Type": "application/json"})
print("Notification sent with status:", response.status_code)
