from bs4 import BeautifulSoup
from datetime import datetime
import re
import uuid
import pandas as pd

# Load the HTML report
with open("/dbfs/mnt/<your_volume_path>/data_quality_load_report.html", "r") as f:
    soup = BeautifulSoup(f, "html.parser")

# Extract report generated time
report_time_str = soup.find(text=re.compile("Report generated on")).strip().split(" on ")[-1].split(" by")[0]
report_time = datetime.strptime(report_time_str, "%d-%b-%Y at %H:%M:%S")

# Extract test took time
summary_div = soup.find("div", string=re.compile("test took"))
summary_text = summary_div.text if summary_div else ""
test_took_match = re.search(r"(\d{2}:\d{2}:\d{2})", summary_text)
test_took = test_took_match.group(1) if test_took_match else None

# Extract error block with stdout call (text after 'Captured stdout call')
error_text_block = soup.find(string=re.compile("Captured stdout call"))
error_lines = []
if error_text_block:
    # Collect all lines following the error block until the next whitespace or section
    for sibling in error_text_block.find_all_next(string=True):
        line = sibling.strip()
        if not line:
            break
        if line.startswith("In table"):
            error_lines.append(line)

# Build output table
run_id = str(uuid.uuid4())
timestamp = datetime.now()

data = [{
    "run_id": run_id,
    "error_message": line,
    "timestamp": timestamp,
    "report_generate_time": report_time,
    "test_took_time": test_took
} for line in error_lines]

# Convert to DataFrame (Databricks Table-ready)
df = pd.DataFrame(data)

display(df)  # For visual output in Databricks Notebook

# Optional: Save to a Delta table
# spark_df = spark.createDataFrame(df)
# spark_df.write.format("delta").mode("append").saveAsTable("data_quality_errors")
