import requests
import pandas as pd
import time

# --- CONFIG ---
workspace_url = "https://<your-instance>.databricks.com"
access_token = "<your_personal_access_token>"
headers = {
    "Authorization": f"Bearer {access_token}"
}

# --- INPUT: table.column list (fully qualified) ---
input_list = [
    "main_catalog.sales.orders.order_id",
    "main_catalog.finance.payments.payment_date",
]

def parse_entry(entry):
    parts = entry.split('.')
    if len(parts) != 4:
        raise ValueError(f"Invalid format: {entry} (should be catalog.schema.table.column)")
    return parts[0], parts[1], parts[2], parts[3]

def get_column_lineage(catalog, schema, table, column):
    dataset_full_name = f"{catalog}.{schema}.{table}"
    lineage_url = f"{workspace_url}/api/2.1/unity-catalog/lineage"

    params = {
        "dataset_name": dataset_full_name,
        "include_column_lineage": "true",
        "direction": "downstream",
        "depth": "3"
    }

    response = requests.get(lineage_url, headers=headers, params=params)
    if response.status_code != 200:
        print(f"❌ Failed for {dataset_full_name}.{column}: {response.text}")
        return [], response.text

    data = response.json()
    downstream_refs = []

    for edge in data.get("column_lineage", []):
        if edge.get("source_column") == f"{dataset_full_name}.{column}":
            downstream_refs.append(edge.get("target_column"))

    return downstream_refs, None

# --- MAIN LOOP ---
results = []

for entry in input_list:
    try:
        catalog, schema, table, column = parse_entry(entry)
        refs, error = get_column_lineage(catalog, schema, table, column)
        results.append({
            "input": entry,
            "referenced_in": refs,
            "error": error or ""
        })
        time.sleep(1)  # respect API rate limits
    except Exception as e:
        results.append({
            "input": entry,
            "referenced_in": [],
            "error": str(e)
        })

# --- EXPORT ---
df = pd.DataFrame(results)
df.to_csv("column_lineage_output.csv", index=False)
print("✅ Done. Output saved to column_lineage_output.csv")
