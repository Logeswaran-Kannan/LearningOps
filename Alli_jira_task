# Objective: Automate data lineage tracing (upstream and downstream tables) for a list of views in Databricks.
# Approach: Use Databricks REST API, Unity Catalog (if available), and Spark SQL parsing.

from pyspark.sql import SparkSession
import re
import json
import pandas as pd

# Initialize Spark
spark = SparkSession.builder.getOrCreate()

# Sample input: List of view names
view_list = ["schema.view1", "schema.view2"]

# Function to extract table names from view definitions using regex
def extract_table_names(sql_text):
    # Simplistic regex for demo purposes
    tables = re.findall(r'(?:from|join)\s+([\w\.]+)', sql_text, re.IGNORECASE)
    return set(tables)

# Dictionary to store lineage
lineage = {}

# Iterate through views
for view in view_list:
    try:
        # Get view definition
        df = spark.sql(f"SHOW CREATE TABLE {view}")
        ddl = df.collect()[0][0]

        # Extract table names from SQL
        tables_used = extract_table_names(ddl)

        # Categorize tables
        ods_tables = [t for t in tables_used if t.lower().startswith("ods_")]
        curated_tables = [t for t in tables_used if t.lower().startswith("curated_")]
        other_tables = [t for t in tables_used if not (t.lower().startswith("ods_") or t.lower().startswith("curated_"))]

        # Store lineage
        lineage[view] = {
            "CREATE_SCRIPT": ddl,
            "UPSTREAM_TABLES": list(tables_used),
            "ODS_TABLES_LIST": ods_tables,
            "CURATED_TABLES_LIST": curated_tables,
            "OTHER_TABLES_LIST": other_tables,
            "DOWNSTREAM_VIEWS": [],
            "DOWNSTREAM_ODS_TABLES_LIST": [],
            "DOWNSTREAM_CURATED_TABLES_LIST": [],
            "DOWNSTREAM_OTHER_TABLES_LIST": []
        }

    except Exception as e:
        lineage[view] = {"error": str(e)}

# Reverse map to find downstream views
downstream_map = {}
for view, data in lineage.items():
    for table in data.get("UPSTREAM_TABLES", []):
        downstream_map.setdefault(table, []).append(view)

# Update downstream information
for view in lineage:
    downstreams = []
    for table in lineage[view].get("UPSTREAM_TABLES", []):
        downstreams.extend(downstream_map.get(view, []))
    lineage[view]["DOWNSTREAM_VIEWS"] = downstreams

    # Categorize downstreams
    ods_down = [v for v in downstreams if v.lower().startswith("ods_")]
    curated_down = [v for v in downstreams if v.lower().startswith("curated_")]
    other_down = [v for v in downstreams if not (v.lower().startswith("ods_") or v.lower().startswith("curated_"))]

    lineage[view]["DOWNSTREAM_ODS_TABLES_LIST"] = ods_down
    lineage[view]["DOWNSTREAM_CURATED_TABLES_LIST"] = curated_down
    lineage[view]["DOWNSTREAM_OTHER_TABLES_LIST"] = other_down

# Convert to tabular format
records = []
for view, data in lineage.items():
    if "error" in data:
        records.append({"VIEW": view, "ERROR": data["error"]})
    else:
        records.append({
            "VIEW": view,
            "CREATE_SCRIPT": data["CREATE_SCRIPT"],
            "UPSTREAM_TABLES": ", ".join(data["UPSTREAM_TABLES"]),
            "ODS_TABLES_LIST": ", ".join(data["ODS_TABLES_LIST"]),
            "CURATED_TABLES_LIST": ", ".join(data["CURATED_TABLES_LIST"]),
            "OTHER_TABLES_LIST": ", ".join(data["OTHER_TABLES_LIST"]),
            "DOWNSTREAM_VIEWS": ", ".join(data["DOWNSTREAM_VIEWS"]),
            "DOWNSTREAM_ODS_TABLES_LIST": ", ".join(data["DOWNSTREAM_ODS_TABLES_LIST"]),
            "DOWNSTREAM_CURATED_TABLES_LIST": ", ".join(data["DOWNSTREAM_CURATED_TABLES_LIST"]),
            "DOWNSTREAM_OTHER_TABLES_LIST": ", ".join(data["DOWNSTREAM_OTHER_TABLES_LIST"])
        })

# Create pandas DataFrame and show as table
df_lineage = pd.DataFrame(records)
print(df_lineage.to_string(index=False))
