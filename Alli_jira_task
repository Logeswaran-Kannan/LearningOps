# Databricks notebook or job script for Teams Notification
# Make sure to install the required library: requests

import requests
import json
from datetime import datetime
from pyspark.sql.functions import col, countDistinct, max as spark_max

# TEAMS WEBHOOK URL
webhook_url = "<Your-Teams-Webhook-URL>"

# 1. Data Load Status
latest_run_id_df = spark.sql("""
    SELECT MAX(run_id) AS latest_run_id 
    FROM core_tst_sys9.default.audit_table_count_check
""")
latest_run_id = latest_run_id_df.collect()[0]["latest_run_id"]

data_status_df = spark.sql(f"""
    SELECT domain,
           SUM(CASE WHEN ods_stg_copy_count > 0 THEN 1 ELSE 0 END) AS stg_loaded,
           SUM(CASE WHEN ods_count > 0 THEN 1 ELSE 0 END) AS ods_loaded,
           SUM(CASE WHEN ods_views_count > 0 THEN 1 ELSE 0 END) AS view_loaded
    FROM core_tst_sys9.default.audit_table_count_check
    WHERE run_id = '{latest_run_id}'
    GROUP BY domain
""")

# 2. Schema Deviation Result
latest_ts_df = spark.sql("""
    SELECT MAX(load_timestamp) AS latest_ts 
    FROM core_tst_sys9.default.ddl_comparison_results
""")
latest_ts = latest_ts_df.collect()[0]["latest_ts"]

schema_deviation_df = spark.sql(f"""
    SELECT status, COUNT(DISTINCT targettablename) AS count
    FROM core_tst_sys9.default.ddl_comparison_results
    WHERE load_timestamp = '{latest_ts}'
    GROUP BY status
""")

# 3. ODS Data Validation
ods_validation_run_df = spark.sql("""
    SELECT MAX(run_id) AS latest_run_id 
    FROM core_tst_sys9.default.result_table
""")
ods_run_id = ods_validation_run_df.collect()[0]["latest_run_id"]

ods_validation_df = spark.sql(f"""
    SELECT processed_comment, COUNT(*) AS count
    FROM (
        SELECT *, 
               CASE WHEN comment LIKE 'Error: [TABLE_OR_VIEW_NOT_FOUND]%' THEN 'TABLE_OR_VIEW_NOT_FOUND'
                    ELSE comment END AS processed_comment
        FROM core_tst_sys9.default.result_table
        WHERE run_id = '{ods_run_id}'
    )
    GROUP BY processed_comment
""")

# 4. ODS_VIEW Data Validation
ods_view_validation_run_df = spark.sql("""
    SELECT MAX(run_id) AS latest_run_id 
    FROM core_tst_sys9.default.result_view_table
""")
ods_view_run_id = ods_view_validation_run_df.collect()[0]["latest_run_id"]

ods_view_validation_df = spark.sql(f"""
    SELECT processed_comment, COUNT(*) AS count
    FROM (
        SELECT *, 
               CASE WHEN comment LIKE 'Error: [TABLE_OR_VIEW_NOT_FOUND]%' THEN 'TABLE_OR_VIEW_NOT_FOUND'
                    ELSE comment END AS processed_comment
        FROM core_tst_sys9.default.result_view_table
        WHERE run_id = '{ods_view_run_id}'
    )
    GROUP BY processed_comment
""")

# Create message card
card = {
    "@type": "MessageCard",
    "@context": "http://schema.org/extensions",
    "summary": "Daily ETL Health Check Report",
    "themeColor": "0076D7",
    "title": "ETL Health Status - {}".format(datetime.now().strftime("%Y-%m-%d %H:%M:%S")),
    "sections": []
}

# Section 1: Data Load Status
section1 = {
    "activityTitle": "üìä Data Load Status",
    "facts": [
        {"name": row['domain'], "value": f"Stg: {row['stg_loaded']}, ODS: {row['ods_loaded']}, View: {row['view_loaded']}"}
        for row in data_status_df.collect()
    ]
}
card['sections'].append(section1)

# Section 2: Schema Deviation
section2 = {
    "activityTitle": "üß¨ Schema Deviation Status",
    "facts": [
        {"name": row['status'], "value": str(row['count'])}
        for row in schema_deviation_df.collect()
    ]
}
card['sections'].append(section2)

# Section 3: ODS Data Validation
section3 = {
    "activityTitle": "üîç ODS Data Validation",
    "facts": [
        {"name": row['processed_comment'], "value": str(row['count'])}
        for row in ods_validation_df.collect()
    ]
}
card['sections'].append(section3)

# Section 4: ODS View Validation
section4 = {
    "activityTitle": "üîé ODS_VIEW Data Validation",
    "facts": [
        {"name": row['processed_comment'], "value": str(row['count'])}
        for row in ods_view_validation_df.collect()
    ]
}
card['sections'].append(section4)

# Post to Teams
response = requests.post(webhook_url, headers={"Content-Type": "application/json"}, data=json.dumps(card))

if response.status_code != 200:
    raise ValueError(f"Request to Teams returned error {response.status_code}, the response is:\n{response.text}")
else:
    print("Notification sent successfully!")
