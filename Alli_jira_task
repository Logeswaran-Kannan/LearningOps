from pyspark.sql import SparkSession

# Initialize Spark session
spark = SparkSession.builder.appName("DDL Comparison").getOrCreate()

# Input: list of table names to compare
table_list = ["p_policy", "b_billing", "c_claim"]

# Source and target catalog/database setup
source_catalog = "core_tst_sys9"
source_database = "rr_source"
target_catalog = "core_tst_sys9"
target_database = "ods"

# Prefix mapping for target tables
prefix_map = {
    'p': 'policycentre_',
    'b': 'billingcentre_',
    'c': 'claimcentre_'
}

def get_columns(catalog, database, table):
    try:
        df = spark.table(f"{catalog}.{database}.{table}")
        return set(col.lower() for col in df.columns)
    except Exception as e:
        print(f"Error accessing {catalog}.{database}.{table}: {e}")
        return set()

# Comparison process
for table in table_list:
    table_prefix = table[0].lower()
    table_name = table.lower()

    # Source table name remains the same
    source_table = table_name

    # Modify target table name based on prefix
    if table_prefix in prefix_map:
        target_table = prefix_map[table_prefix] + table_name
    else:
        target_table = table_name

    # Get column sets
    source_columns = get_columns(source_catalog, source_database, source_table)
    target_columns = get_columns(target_catalog, target_database, target_table)

    # Find differences
    missing_in_target = source_columns - target_columns
    missing_in_source = target_columns - source_columns

    # Output results
    print(f"\nTable Comparison: {table_name}")
    print(f"Missing in target ({target_table}): {missing_in_target}")
    print(f"Missing in source ({source_table}): {missing_in_source}")
