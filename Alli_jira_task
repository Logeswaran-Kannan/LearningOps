# Full updated script with progress tracking, concurrent execution, and final DataFrame display

from pyspark.sql import SparkSession
from pyspark.sql.functions import col, when, lit, lower, regexp_replace
from pyspark.sql.types import StructType, StructField, StringType, IntegerType, ArrayType
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime
import time
import pandas as pd
from threading import Lock

spark = SparkSession.builder.appName("CatalogComparison").getOrCreate()

# Configuration
source_catalog = "core_tst_sys9"
source_db = "rr_source"
target_catalog = "core_tst_std001"
target_db = "ods"
table_names = ["cc_matter", "btable2", "ctable3"]
filter_start = '2025-05-12T00:00:01.0025+00:00'
filter_end = '2025-05-13T00:00:01.0025+00:00'

# Load metadata from CSV
boolean_df = spark.read.option("header", True).csv("/mnt/data/Booleancol.csv")
filtercol_df = spark.read.option("header", True).csv("/mnt/data/filtercol.csv")

# Output schema
schema = StructType([
    StructField("tablename", StringType(), True),
    StructField("source_table", StringType(), True),
    StructField("target_table", StringType(), True),
    StructField("source_count", IntegerType(), True),
    StructField("targetfullcount", IntegerType(), True),
    StructField("targetfiltercount", IntegerType(), True),
    StructField("targetcountpostdedup", IntegerType(), True),
    StructField("duplicate_check_in_target", IntegerType(), True),
    StructField("converted_boolean_columns", ArrayType(StringType()), True),
    StructField("decimal_columns", ArrayType(StringType()), True),
    StructField("source_only_count", IntegerType(), True),
    StructField("target_only_count", IntegerType(), True),
    StructField("missing_in_source", ArrayType(StringType()), True),
    StructField("missing_in_target", ArrayType(StringType()), True),
    StructField("data_mismatches_source_to_target", IntegerType(), True),
    StructField("data_mismatches_target_to_source", IntegerType(), True),
    StructField("comment", StringType(), True),
    StructField("casted_comparison_sql", StringType(), True)
])

# Progress tracking
progress_counter = 0
progress_lock = Lock()
all_results = []

# Utility functions
def normalize_column_names(df):
    return df.select([col(c).alias(c.lower()) for c in df.columns])

def generate_target_table_name(table):
    if table.startswith("p"):
        return f"policycenter_std001_{table}"
    elif table.startswith("b"):
        return f"billingcenter_std001_{table}"
    elif table.startswith("c"):
        return f"claimcenter_std001_{table}"
    return table

def correct_boolean_cast(df, column):
    return df.withColumn(column, when(lower(col(column)) == "t", lit(1)).when(lower(col(column)) == "f", lit(0)).otherwise(None).cast("int"))

def cast_decimal_to_double(df):
    decimal_cols = [f.name for f in df.schema.fields if f.dataType.simpleString().startswith("decimal")]
    for c in decimal_cols:
        df = df.withColumn(c, col(c).cast("double"))
    return df, decimal_cols

def remove_column(df, colname):
    return df.drop(colname) if colname in df.columns else df

def build_sql_exprs(columns, bool_cols, decimal_cols, source=True):
    exprs = []
    for c in columns:
        if source and c in bool_cols:
            exprs.append(f"CAST(CASE LOWER({c}) WHEN 't' THEN 1 WHEN 'f' THEN 0 ELSE NULL END AS STRING) AS {c}")
        elif c in decimal_cols:
            exprs.append(f"CAST({c} AS DOUBLE) AS {c}")
        else:
            exprs.append(f"CAST({c} AS STRING) AS {c}")
    return exprs

def compare_table(table):
    global progress_counter
    table_start = time.time()

    source_table = f"{source_catalog}.{source_db}.{table}"
    target_table = generate_target_table_name(table)
    target_table_full = f"{target_catalog}.{target_db}.{target_table}"

    try:
        source_df = normalize_column_names(spark.read.table(source_table))
        target_df = normalize_column_names(spark.read.table(target_table_full))

        for c in source_df.columns:
            if source_df.schema[c].dataType.simpleString() == "string":
                source_df = source_df.withColumn(c, regexp_replace(col(c), "ï¿½", "-"))
                source_df = source_df.withColumn(c, regexp_replace(col(c), '""', '"'))
                source_df = source_df.withColumn(c, regexp_replace(col(c), '^"(.*)"$', '$1'))

        bool_cols = [row["booleancolumn"] for row in boolean_df.filter(col("tablename") == table.lower()).collect()]
        bool_patterns = {colname: "tf" for colname in bool_cols}

        target_df = remove_column(target_df, "azure_load_date")
        target_df, decimal_cols = cast_decimal_to_double(target_df)
        for c in decimal_cols:
            if c in source_df.columns:
                source_df = source_df.withColumn(c, col(c).cast("double"))

        filter_col_row = filtercol_df.filter(col("tablename") == table.lower()).select("filtercol").first()
        filter_col = filter_col_row["filtercol"] if filter_col_row and filter_col_row["filtercol"] in source_df.columns else None

        full_target_count = target_df.count()
        dedup_target_df = target_df.dropDuplicates()
        post_dedup_count = dedup_target_df.count()

        if full_target_count > 3000 and filter_col:
            filtered_source_df = source_df.filter((col(filter_col) >= filter_start) & (col(filter_col) <= filter_end))
            filtered_target_df = dedup_target_df.filter((col(filter_col) >= filter_start) & (col(filter_col) <= filter_end))
        else:
            filtered_source_df = source_df
            filtered_target_df = dedup_target_df

        targetfiltercount = filtered_target_df.count()
        source_count = filtered_source_df.count()
        common_cols = list(set(filtered_source_df.columns) & set(filtered_target_df.columns))

        for c in common_cols:
            if c in bool_cols:
                filtered_source_df = correct_boolean_cast(filtered_source_df, c)
            elif c in decimal_cols:
                filtered_source_df = filtered_source_df.withColumn(c, col(c).cast("double"))
            else:
                filtered_source_df = filtered_source_df.withColumn(c, col(c).cast("string"))

        for c in common_cols:
            if c in decimal_cols:
                filtered_target_df = filtered_target_df.withColumn(c, col(c).cast("double"))
            else:
                filtered_target_df = filtered_target_df.withColumn(c, col(c).cast("string"))

        source_only = filtered_source_df.select(common_cols).exceptAll(filtered_target_df.select(common_cols)).count()
        target_only = filtered_target_df.select(common_cols).exceptAll(filtered_source_df.select(common_cols)).count()

        missing_in_source = list(set(filtered_target_df.columns) - set(filtered_source_df.columns))
        missing_in_target = list(set(filtered_source_df.columns) - set(filtered_target_df.columns))
        duplicate_count = full_target_count - post_dedup_count

        comment_parts = []
        if source_count != post_dedup_count:
            comment_parts.append("count mismatch")
        if missing_in_source:
            comment_parts.append("missing columns in source")
        if missing_in_target:
            comment_parts.append("missing columns in target")
        if source_only + target_only > 0:
            comment_parts.append("data mismatch")
        if duplicate_count > 0:
            comment_parts.append("duplicates in target")

        comment = " | ".join(comment_parts) if comment_parts else "All checks passed"

        source_sql = f"SELECT {', '.join(build_sql_exprs(common_cols, bool_cols, decimal_cols, source=True))} FROM {source_table}"
        target_sql = f"SELECT {', '.join(build_sql_exprs(common_cols, bool_cols, decimal_cols, source=False))} FROM {target_table_full}"

        if full_target_count > 3000 and filter_col:
            source_sql += f" WHERE {filter_col} BETWEEN '{filter_start}' AND '{filter_end}'"
            target_sql += f" WHERE {filter_col} BETWEEN '{filter_start}' AND '{filter_end}'"

        casted_sql = f"%sql \n{source_sql}\n except \n{target_sql}"

        duration = round(time.time() - table_start, 2)

        with progress_lock:
            progress_counter += 1
            print(f"[Progress] {progress_counter}/{len(table_names)} | {table} completed in {duration}s")

        return (table, source_table, target_table_full, source_count, full_target_count, targetfiltercount,
                post_dedup_count, duplicate_count, bool_cols, decimal_cols,
                source_only, target_only, missing_in_source, missing_in_target,
                source_only, target_only, comment, casted_sql)

    except Exception as e:
        with progress_lock:
            progress_counter += 1
            print(f"[Error] {progress_counter}/{len(table_names)} | {table} failed: {str(e)}")
        return (table, source_table, target_table_full, 0, 0, 0, 0, 0, [], [], 0, 0, [], [], 0, 0, str(e), "")

# Run comparisons concurrently and update final table as each completes
with ThreadPoolExecutor() as executor:
    future_to_table = {executor.submit(compare_table, tbl): tbl for tbl in table_names}
    for future in as_completed(future_to_table):
        result = future.result()
        all_results.append(result)
        result_df = spark.createDataFrame([result], schema=schema)
        if not spark._jsparkSession.catalog().tableExists("core_tst_sys9.default.validation_results"):
            result_df.write.mode("overwrite").saveAsTable("core_tst_sys9.default.validation_results")
        else:
            result_df.write.mode("append").saveAsTable("core_tst_sys9.default.validation_results")

# Create and display consolidated final DataFrame
final_df = spark.createDataFrame(all_results, schema=schema)
final_df.show(truncate=False)
