import requests
import pandas as pd

# Token and URL Setup
token = "test"
url = "https://adb-67779643136828772.12.azuredatabricks.net/api/2.0/lineage-tracking/column-lineage"
headers = {
    "Authorization": f"Bearer {token}",
    "Content-Type": "application/json"
}

# Parameters Setup
params = {
    "table_name": "core_tst_std001.ods_views.vw_policycenter_std001_current_pc_policy",
    "column_name": "productcode",
    "include_entity_lineage": True
}

# Request Execution
response = requests.get(url, headers=headers, params=params)

# Response Handling
if response.status_code == 200:
    data = response.json()

    # Flatten the JSON if needed
    upstream = pd.json_normalize(data.get('upstream_cols', []))
    downstream = pd.json_normalize(data.get('downstream_cols', []))

    # Add direction and default linkage details
    upstream["direction"] = "upstream"
    downstream["direction"] = "downstream"

    # Function to determine linkage type and comment
    def determine_linkage(row):
        if 'vw_policycenter_std001_current_pc_policy' in row.get('table_name', ''):
            return pd.Series(["direct", "Direct relation to the source table"])
        elif 'vw_' in row.get('table_name', ''):
            return pd.Series(["indirect", "Derived from a view possibly indirectly linked"])
        else:
            return pd.Series(["unknown", "Linkage unknown"])

    upstream[["linkage_type", "comment"]] = upstream.apply(determine_linkage, axis=1)
    downstream[["linkage_type", "comment"]] = downstream.apply(determine_linkage, axis=1)

    # Merge all into a single DataFrame with labels
    lineage_df = pd.concat([upstream, downstream], ignore_index=True)

    print("\nLineage Details:\n")
    display(lineage_df)

else:
    print(f"Request failed with status code {response.status_code}")
    print(response.text)
