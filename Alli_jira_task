# Final fully-corrected script for Databricks Teams notification with bar charts using pandas for row access

import requests
import json
from datetime import datetime
from pyspark.sql.functions import col, count, max as spark_max

webhook_url = "<Your-Teams-Webhook-URL>"

# 1. Data Load Status
latest_run_id = spark.sql("SELECT MAX(run_id) AS latest_run_id FROM core_tst_sys9.default.audit_table_count_check").collect()[0]["latest_run_id"]

data_status_df = spark.sql(f"""
    SELECT domain,
           COUNT(*) AS total_tables,
           SUM(CASE WHEN ods_stg_copy_count > 0 THEN 1 ELSE 0 END) AS stg_loaded,
           SUM(CASE WHEN ods_count > 0 THEN 1 ELSE 0 END) AS ods_loaded,
           SUM(CASE WHEN ods_views_count > 0 THEN 1 ELSE 0 END) AS view_loaded
    FROM core_tst_sys9.default.audit_table_count_check
    WHERE run_id = '{latest_run_id}'
    GROUP BY domain
""").toPandas()

# 2. Schema Deviation Result
latest_ts = spark.sql("SELECT MAX(load_timestamp) AS latest_ts FROM core_tst_sys9.default.ddl_comparison_results").collect()[0]["latest_ts"]

schema_deviation_df = spark.sql(f"""
    SELECT status, COUNT(DISTINCT targettablename) AS count
    FROM core_tst_sys9.default.ddl_comparison_results
    WHERE load_timestamp = '{latest_ts}'
    GROUP BY status
""").toPandas()

# 3. ODS Data Validation
ods_run_id = spark.sql("SELECT MAX(run_id) AS latest_run_id FROM core_tst_sys9.default.result_table").collect()[0]["latest_run_id"]

ods_validation_df = spark.sql(f"""
    SELECT processed_comment, COUNT(*) AS count
    FROM (
        SELECT *, 
               CASE WHEN comment LIKE 'Error: [TABLE_OR_VIEW_NOT_FOUND]%' THEN 'TABLE_OR_VIEW_NOT_FOUND'
                    ELSE comment END AS processed_comment
        FROM core_tst_sys9.default.result_table
        WHERE run_id = '{ods_run_id}'
    )
    GROUP BY processed_comment
""").toPandas()

# 4. ODS_VIEW Data Validation
ods_view_run_id = spark.sql("SELECT MAX(run_id) AS latest_run_id FROM core_tst_sys9.default.result_view_table").collect()[0]["latest_run_id"]

ods_view_validation_df = spark.sql(f"""
    SELECT processed_comment, COUNT(*) AS count
    FROM (
        SELECT *, 
               CASE WHEN comment LIKE 'Error: [TABLE_OR_VIEW_NOT_FOUND]%' THEN 'TABLE_OR_VIEW_NOT_FOUND'
                    ELSE comment END AS processed_comment
        FROM core_tst_sys9.default.result_view_table
        WHERE run_id = '{ods_view_run_id}'
    )
    GROUP BY processed_comment
""").toPandas()

# Helper function to create bar charts

def bar_chart_row(label, total, segments):
    html = f"<p><strong>{label}</strong></p><div style='display:flex;width:100%;height:20px;border:1px solid #ccc;'>"
    for color, value in segments:
        width = (value / total * 100) if total else 0
        html += f"<div style='width:{width:.2f}%;background:{color};'></div>"
    html += "</div><br/>"
    return html

html = "<h2>ðŸ“Š ETL Health Dashboard</h2>"

# Section 1: Data Load Status
html += "<h3>Data Load Status</h3>"
for _, row in data_status_df.iterrows():
    total = row["total_tables"]
    segments = [
        ("#4CAF50", row["stg_loaded"]),
        ("#2196F3", row["ods_loaded"]),
        ("#FFC107", row["view_loaded"])
    ]
    html += bar_chart_row(row["domain"], total, segments)

# Section 2: Schema Deviation
html += "<h3>Schema Deviation</h3>"
schema_total = schema_deviation_df["count"].sum()
schema_segments = [
    ("#4CAF50" if row["status"] == "All Pass" else "#F44336", row["count"])
    for _, row in schema_deviation_df.iterrows()
]
html += bar_chart_row("Schema Deviation", schema_total, schema_segments)

# Section 3: ODS Validation
html += "<h3>ODS Validation</h3>"
ods_total = ods_validation_df["count"].sum()
ods_segments = [
    ("#4CAF50" if "passed" in row["processed_comment"].lower() else "#F44336", row["count"])
    for _, row in ods_validation_df.iterrows()
]
html += bar_chart_row("ODS Checks", ods_total, ods_segments)

# Section 4: ODS_VIEW Validation
html += "<h3>ODS_VIEW Validation</h3>"
ods_view_total = ods_view_validation_df["count"].sum()
ods_view_segments = [
    ("#4CAF50" if "passed" in row["processed_comment"].lower() else "#F44336", row["count"])
    for _, row in ods_view_validation_df.iterrows()
]
html += bar_chart_row("ODS_VIEW Checks", ods_view_total, ods_view_segments)

# Final Teams message
card = {
    "@type": "MessageCard",
    "@context": "http://schema.org/extensions",
    "summary": "ETL Health Report",
    "themeColor": "0076D7",
    "title": "ðŸ“¥ ETL Health Status - {}".format(datetime.now().strftime("%Y-%m-%d %H:%M:%S")),
    "text": html
}

response = requests.post(webhook_url, headers={"Content-Type": "application/json"}, data=json.dumps(card))

if response.status_code != 200:
    raise ValueError(f"Request to Teams returned error {response.status_code}, the response is:\n{response.text}")
else:
    print("Notification sent successfully!")
