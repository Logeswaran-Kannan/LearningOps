import time

# Define workflow name
workflow_name = "UKS_SIT_DW_E2E_Workflow"

# Define tasks (ODS Validation and DLT Pipeline)
tasks = [
    {
        "task_key": "ValidationTask",
        "notebook_path": "/Workspace/Repos/ODS_SIT_AUTOMATION_POC/notebooks/UKS_SIT_DW_E2E/ODS_BRONZE_VALIDATION_ESSENTIAL"
    },
    {
        "task_key": "DLT_PIPELINE",
        "notebook_path": "/Workspace/Repos/ODS_SIT_AUTOMATION_POC/notebooks/UKS_SIT_DW_E2E/DLT_REFRESH_PIPELINE",
        "depends_on": ["ValidationTask"]
    }
]

# Function to run a notebook task
def run_notebook(task):
    notebook_path = task["notebook_path"]
    try:
        print(f"Starting task: {task['task_key']} ({notebook_path})")
        result = dbutils.notebook.run(notebook_path, timeout_seconds=0)
        print(f"Completed: {task['task_key']} - Result: {result}")
    except Exception as e:
        print(f"Error running {task['task_key']}: {str(e)}")

# Function to create or modify the workflow
def execute_workflow():
    print(f"Executing Workflow: {workflow_name}")

    # Track executed tasks
    executed_tasks = {}

    for task in tasks:
        # Check dependencies
        if "depends_on" in task:
            parent_task = task["depends_on"][0]
            while parent_task not in executed_tasks:
                print(f"Waiting for {parent_task} to complete...")
                time.sleep(5)  # Wait for the parent task to complete

        # Run the notebook task
        run_notebook(task)
        executed_tasks[task["task_key"]] = True  # Mark task as completed

    print(f"Workflow Execution Completed: {workflow_name}")

# Run the workflow
execute_workflow()
