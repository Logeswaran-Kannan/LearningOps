from pyspark.sql import SparkSession
from pyspark.sql.functions import col, count, lit, when, expr, current_timestamp
import time

# Initialize Spark session
spark = SparkSession.builder.appName("DataMigrationValidation").enableHiveSupport().getOrCreate()

# Define source and target databases
source_db = "ods"
target_db = "ods_views"
output_db = "core_tst_sys9"
output_table = "data_migration_validation_results"

# Columns to exclude from comparison
excluded_columns = {"DWH_FROM_DATE", "DWH_UNTIL_DATE", "DWH_CURRENT_FLAG"}

# Fetch list of tables from source
source_tables = [row.tableName for row in spark.sql(f"SHOW TABLES IN {source_db}").collect()]

def validate_table(table_name):
    target_table_name = f"vm_{table_name}"
    start_time = time.time()
    
    try:
        # Load source and target data
        src_df = spark.table(f"{source_db}.{table_name}")
        tgt_df = spark.table(f"{target_db}.{target_table_name}")
        
        # Get source and target schemas (excluding specified columns)
        src_cols = {col_name: dtype for col_name, dtype in src_df.dtypes if col_name not in excluded_columns}
        tgt_cols = {col_name: dtype for col_name, dtype in tgt_df.dtypes if col_name not in excluded_columns}
        
        # Compare DDL structures
        missing_in_target = list(set(src_cols.keys()) - set(tgt_cols.keys()))
        missing_in_source = list(set(tgt_cols.keys()) - set(src_cols.keys()))
        
        # Align columns by dropping extra ones
        common_cols = list(set(src_cols.keys()) & set(tgt_cols.keys()))
        src_df = src_df.select(common_cols)
        tgt_df = tgt_df.select(common_cols)
        
        # Row count comparison
        src_count = src_df.count()
        tgt_count = tgt_df.count()
        count_match = src_count == tgt_count
        
        # Null count comparison
        null_diffs = []
        for col_name in common_cols:
            src_null_count = src_df.filter(col(col_name).isNull()).count()
            tgt_null_count = tgt_df.filter(col(col_name).isNull()).count()
            if src_null_count != tgt_null_count:
                null_diffs.append(col_name)
        
        # Data comparison
        mismatched_cols = []
        comparison_count_src = src_df.exceptAll(tgt_df).count()
        comparison_count_tgt = tgt_df.exceptAll(src_df).count()
        
        if comparison_count_src > 0 or comparison_count_tgt > 0:
            for col_name in common_cols:
                if src_df.select(col_name).exceptAll(tgt_df.select(col_name)).count() > 0:
                    mismatched_cols.append(col_name)
        
        # Determine status and comments
        if missing_in_source or missing_in_target:
            status = "FAIL"
            comment = "DDL Mismatch"
        elif not count_match:
            status = "FAIL"
            comment = "Count Validation Fails"
        elif comparison_count_src > 0 or comparison_count_tgt > 0:
            status = "FAIL"
            comment = "Data Validation Fails"
        elif null_diffs:
            status = "FAIL"
            comment = "Null Validation Fails"
        else:
            status = "PASS"
            comment = "Pass"
        
        time_taken = round(time.time() - start_time, 2)
        
        # Store results in output table
        result_df = spark.createDataFrame([
            (table_name, source_db, target_db, ",".join(missing_in_target), ",".join(missing_in_source),
             src_count, tgt_count, comparison_count_src, comparison_count_tgt, ",".join(null_diffs),
             ",".join(mismatched_cols), status, comment, time_taken)
        ], ["table_name", "src_database", "tgt_database", "src_vs_tgt_missing_columns", 
            "tgt_vs_src_missing_columns", "src_count", "tgt_count", "src_vs_tgt_data_mismatch_count", 
            "tgt_vs_src_data_mismatch_count", "null_diff_columns", "data_mismatch_columns", "status", "comment", "time_taken_seconds"])
        
        result_df.write.mode("append").saveAsTable(f"{output_db}.{output_table}")
        
    except Exception as e:
        time_taken = round(time.time() - start_time, 2)
        error_df = spark.createDataFrame([
            (table_name, source_db, target_db, "", "", 0, 0, 0, 0, "", "", "FAIL", str(e), time_taken)
        ], ["table_name", "src_database", "tgt_database", "src_vs_tgt_missing_columns", 
            "tgt_vs_src_missing_columns", "src_count", "tgt_count", "src_vs_tgt_data_mismatch_count", 
            "tgt_vs_src_data_mismatch_count", "null_diff_columns", "data_mismatch_columns", "status", "comment", "time_taken_seconds"])
        
        error_df.write.mode("append").saveAsTable(f"{output_db}.{output_table}")

# Iterate over each table and validate
for table in source_tables:
    validate_table(table)

print("Data migration validation completed.")
